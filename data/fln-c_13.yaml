- en: Chapter 11\. Building a User Management System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。构建用户管理系统
- en: This chapter tells the story of applying the patterns from [Part I](part01.xhtml#part_1)
    of this book to a running example. With that example, it illustrates how design
    choices made with the aid of patterns provide benefits and support for programmers.
    This chapter’s running example is abstracted from an industrial-strength implementation
    of a user management system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讲述了将本书第一部分的模式应用于运行示例的故事。通过该示例，它说明了如何通过模式做出设计选择能够为程序员提供好处和支持。本章的运行示例是从一个工业级别的用户管理系统的实现中抽象出来的。
- en: The Pattern Story
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式故事
- en: Imagine you are fresh from university and start working for a software development
    company. Your boss hands you a product specification for a piece of software that
    stores usernames and passwords and tells you to implement it. The software should
    provide functionality to check whether a provided password for a user is correct
    and functionality to create, delete, and view existing users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你刚从大学毕业，开始为一家软件开发公司工作。你的老板交给你一个软件规范，用于存储用户名和密码，并告诉你要实现它。该软件应该提供检查用户提供的密码是否正确以及创建、删除和查看现有用户的功能。
- en: You are eager to show your boss that you are a good programmer, but before you
    even start, your mind fills with questions. Should you write all code into a single
    file? You know from your studies that this is bad practice, but what’s a good
    number of files? Which parts of the code will you put into the same files? Should
    you check the input parameters for each function? Should your functions return
    detailed error information? At university you learned how to build a software
    program that works, but you did not learn how to write good code that is maintainable.
    So what should you do? How do you start?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你渴望向老板展示你是一位优秀的程序员，但在你开始之前，脑海中充满了问题。你应该把所有的代码都写到一个文件中吗？你从学习中知道这是不好的实践，但是什么是一个好的文件数量？你将代码的哪些部分放到同一个文件中？你应该检查每个函数的输入参数吗？你的函数是否应该返回详细的错误信息？在大学里，你学会了如何构建一个能运行的软件程序，但你没有学会如何编写可维护的优秀代码。那么你该怎么做？你如何开始呢？
- en: Data Organization
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据组织
- en: To answer your questions, start by reviewing the patterns in this book to get
    guidance on how to build good C programs. Begin with the part of your system that
    stores the usernames and passwords. Your questions should now focus on how to
    store the data in your program. Should you store it in global variables? Should
    you hold the data in local variables inside a function? Should you allocate dynamic
    memory?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答你的问题，首先通过查阅本书中的模式来获取如何构建良好的 C 程序的指导。从系统中存储用户名和密码的部分开始。你现在的问题应该集中在如何在程序中存储数据上。你应该将它存储在全局变量中吗？还是应该将数据保存在函数内的局部变量中？还是应该分配动态内存？
- en: 'First, consider the exact problem that you want to solve in your application:
    you are not sure how to store the username data. Currently, there is no need to
    make this data persistent; you simply want to be able to build up and access this
    data at runtime. Also, you don’t want the caller of your functions to have to
    cope with explicit allocation and initialization of the data.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，考虑您的应用程序中要解决的确切问题：您不确定如何存储用户名数据。目前不需要使这些数据持久化；您只是想在运行时能够构建和访问这些数据。此外，您不希望函数的调用者必须处理数据的显式分配和初始化。
- en: Next, look for patterns that address your specific problem. Review the C patterns
    on data lifetime and ownership from [Chapter 5](ch05.xhtml#chapter_lifetime),
    which addresses the issue of who is responsible of holding which data. Read through
    all the problem sections of these patterns and find one pattern that matches your
    problem very well and describes consequences which are acceptable to you. That
    pattern is the Software-Module with Global State pattern, which suggests having
    Eternal Memory in the form of global variables with scope limited to the file
    in order for that data to be accessed from within that file.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，寻找解决你特定问题的模式。查阅第 5 章关于数据生命周期和所有权的 C 模式，该章节讨论了谁负责持有哪些数据的问题，其中包括所有模式的问题部分，并找到一个非常匹配你问题并描述的后果对你可接受的模式。这个模式是具有全局状态的软件模块模式，建议使用全局变量的永久内存形式，作用域限制在文件内，以便从该文件内访问该数据。
- en: '| Pattern name | Summary |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概要 |'
- en: '| --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Software-Module with Global State | Have one global instance to let your
    related functions share common resources. Put all functions that operate on this
    instance into one header file and provide the caller this interface to your software-module.
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 具有全局状态的软件模块 | 使用一个全局实例来让相关函数共享公共资源。将所有操作此实例的函数放入一个头文件中，并为调用者提供你的软件模块的此接口。'
- en: '| Eternal Memory | Put your data into memory that is available throughout the
    whole lifetime of your program. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 永久内存 | 将数据放入整个程序生命周期内可用的内存中。 |'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_building_a_user_management_system_CO1-1)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_building_a_user_management_system_CO1-1)'
- en: The `userList` contains the data for your users. It is accessible within the
    implementation file. Because it is kept in the static memory, there is no need
    to manually allocate it (which would make the code more flexible, but also more
    complicated).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`userList`包含用户数据。它在实现文件中可访问。因为它保留在静态内存中，所以不需要手动分配它（这会使代码更灵活，但也更复杂）。'
- en: Storing Passwords
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储密码
- en: In this simplified example, we keep the password in plain text. Never, ever
    do this in real-life applications. When storing passwords, you should instead
    store a [salted hash value](https://oreil.ly/5y7yO) of the plain text password.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简化的示例中，我们将密码保留为明文。在实际应用中绝对不能这样做。存储密码时，应该存储明文密码的[加盐哈希值](https://oreil.ly/5y7yO)。
- en: File Organization
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件组织
- en: Next, define an interface for your caller. Make sure that it is easy for you
    to change your implementation later on without requiring the caller to change
    any code. Now you have to decide which part of your program should be defined
    in the interface and which part should be defined in your implementation file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为你的调用方定义一个接口。确保以后可以轻松更改你的实现而不需要调用方更改任何代码。现在你必须决定程序的哪一部分应该在接口中定义，哪一部分应该在你的实现文件中定义。
- en: Solve this problem by using Header Files. Put as few things as possible (only
    those things that are relevant to the caller) into the interface (*.h* file).
    All the rest goes into your implementation files (*.c* files). To protect against
    multiple inclusion of header files, implement an Include Guard.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用头文件解决这个问题。只将对调用方有用的东西放入接口（*.h*文件）中。其余的都放入你的实现文件（*.c*文件）中。为了防止头文件被多次包含，实现一个包含保护。
- en: '| Pattern name | Summary |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Header Files | Provide function declarations in your API for any functionality
    you want to provide to your user. Hide any internal functions, internal data,
    and your function definitions (the implementations) in your implementation file
    and don’t provide this implementation file to the user. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 头文件 | 在你的API中提供函数声明，以提供给用户所需的任何功能。将任何内部函数、内部数据和函数定义（实现）隐藏在你的实现文件中，并且不向用户提供此实现文件。'
- en: '| Include Guard | Protect the content of your header files against multiple
    inclusion so that the developer using the header files does not have to care whether
    it is included multiple times. Use an interlocked `#ifdef` statement or a `#pragma
    once` statement to achieve this. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 包含保护 | 保护头文件内容，防止多次包含，使得使用头文件的开发人员不必关心它是否被多次包含。使用一个交互锁定的`#ifdef`语句或`#pragma
    once`语句来实现这一点。 |'
- en: '*user.h*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.h*'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*user.c*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.c*'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now the caller can use the defined `MAX_SIZE` to know how long the strings provided
    to the software-module can be. By convention, the caller knows that everything
    in the *.h* file can be used but that nothing in the *.c* file should be used.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在调用方可以使用定义的`MAX_SIZE`来知道提供给软件模块的字符串可以有多长。按照惯例，调用方知道*.h*文件中的所有内容都可以使用，但*.c*文件中的内容则不应使用。
- en: Next, make sure that your code files are well separated from your caller’s code
    to avoid name clashes. Should you put all your files into one directory, or should
    you, for example, have all *.h* files in the whole codebase in one directory to
    make it easier to include them?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保你的代码文件与调用者的代码良好分离，以避免名称冲突。你是否应该将所有文件放入一个目录中，或者例如将所有*.h*文件放在整个代码库中的一个目录中，以便更容易地包含它们？
- en: Create a Software-Module Directory and put all your files for your software-module,
    the interfaces and the implementations, into one directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个软件模块目录，将所有与软件模块相关的文件（接口和实现）放入一个目录中。
- en: '| Pattern name | Summary |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Software-Module Directories | Put header files and implementation files that
    belong to a tightly coupled functionality into one directory. Name that directory
    after the functionality that is provided via the header files. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 软件模块目录 | 将属于紧密耦合功能的头文件和实现文件放入一个目录中。将该目录命名为通过头文件提供的功能。 |'
- en: With the directory structure shown in [Figure 11-1](#fig_story2), it is now
    possible to easily spot all files that are related to your code. Now you don’t
    have to worry that the names of your implementation files will clash with other
    filenames.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有了[图 11-1](#fig_story2)所示的目录结构，现在可以轻松地找到所有与你的代码相关的文件。现在你不必担心你的实现文件名与其他文件名冲突的问题了。
- en: '![fluc 1101](assets/fluc_1101.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![fluc 1101](assets/fluc_1101.png)'
- en: Figure 11-1\. File structure
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1\. 文件结构
- en: 'Authentication: Error Handling'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证：错误处理
- en: Now it is time to implement the first functionality to access the data. Start
    by implementing a function that checks whether a provided password matches the
    previously saved password for a provided user. Define the behavior of the function
    by declaring the function in the header file and documenting that behavior with
    code comments next to the function declaration.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是实现首个访问数据功能的时候了。首先实现一个函数，检查提供的密码是否与先前保存的用户密码匹配。通过在头文件中声明函数并在函数声明旁边用代码注释文档化函数的行为来定义函数的行为。
- en: The function should let the caller know whether the provided password is correct
    for a provided user. Tell the caller by using the Return Value of the function.
    But which information should you return? Should you provide the caller with any
    error information that occurs?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 函数应告诉调用者提供的密码是否正确。通过函数的返回值告知调用者。但是应该返回哪些信息呢？是否应该向调用者提供任何发生的错误信息？
- en: Only Return Relevant Errors because for any security-related functionality,
    it is common to provide only the information that you must provide and no more.
    Don’t let the caller know whether the provided user does not exist or whether
    the provided password is wrong. Instead, simply tell the caller whether authentication
    worked or not.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 只返回相关的错误，因为对于任何与安全相关的功能，通常只提供必须提供的信息，不多提供。不要让调用者知道提供的用户不存在还是提供的密码错误。相反，只需告诉调用者认证是否成功。
- en: '| Pattern name | Summary |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概要 |'
- en: '| --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Return Value | Simply use the one C mechanism intended to retrieve information
    about the result of a function call: the Return Value. The mechanism to return
    data in C copies the function result and provides the caller access to this copy.
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 返回值 | 简单地使用C语言中用于获取函数调用结果信息的机制：返回值。C语言中返回数据的机制复制函数结果并提供调用者访问这个副本的方式。 |'
- en: '| Return Relevant Errors | Only return error information to the caller if that
    information is relevant to the caller. Error information is only relevant to the
    caller if the caller can react to that information. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 返回相关的错误 | 只有当错误信息对调用者有意义时才将错误信息返回给调用者。如果调用者能够对信息做出反应，则错误信息对调用者有意义。 |'
- en: '*user.h*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.h*'
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code defines which value is returned by the function very well, but it
    does not specify the behavior in case of invalid input. How should you cope with
    invalid input like `NULL` pointers? Should you check against `NULL` pointers,
    or should you simply ignore invalid input?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码非常清楚地定义了函数返回的值，但是没有指定在输入无效的情况下的行为。应该如何处理像`NULL`指针这样的无效输入？你应该检查`NULL`指针，还是应该简单地忽略无效输入？
- en: Require your user to provide valid input, because invalid input would be a programming
    error of that user, and such errors should not go unnoticed. According to the
    Samurai Principle, you abort the program in case of invalid input and document
    that behavior in the header file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要求用户提供有效的输入，因为无效的输入将是用户的编程错误，这样的错误不应被忽视。根据武士原则，在遇到无效输入时应中止程序，并在头文件中记录这种行为。
- en: '| Pattern name | Summary |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概要 |'
- en: '| --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Samurai Principle | Return from a function victorious or not at all. If there
    is a situation for which you know that an error cannot be handled, then abort
    the program. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 武士原则 | 要么成功返回函数，要么根本不返回。如果有一个情况是你知道无法处理错误的情况，那么就中止程序。 |'
- en: '*user.h*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.h*'
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*user.c*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.c*'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the Samurai Principle, you take the burden from your caller of checking
    for specific return values indicating invalid input. Instead, for invalid input
    the program crashes. You chose to use explicit `assert` statements instead of
    letting the program crash in an uncontrolled way (e.g., by passing invalid input
    to the `strcmp` function), In the context of security-critical applications, you
    want your program to have a defined behavior even in error situations.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用武士原则，你从调用者身上卸下检查特定返回值指示无效输入的负担。相反，对于无效输入，程序崩溃。你选择使用显式的`assert`语句，而不是让程序以不受控制的方式崩溃（例如将无效输入传递给`strcmp`函数）。在安全关键应用的上下文中，你希望程序在错误情况下也能有定义的行为。
- en: At first glance, letting the program crash looks like a brutal solution, but
    with that behavior, calls with invalid parameters do not go unnoticed. Over the
    long term, this strategy makes the code more reliable. It does not let subtle
    bugs, like invalid parameters, manifest and show up somewhere else in the caller’s
    code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，让程序崩溃似乎是一个残酷的解决方案，但这种行为下，带有无效参数的调用不会被忽视。长期来看，这种策略使代码更加可靠。它不会让诸如无效参数之类的微妙错误在调用者的代码中显现出来。
- en: 'Authentication: Error Logging'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证：错误日志记录
- en: Next, keep track of callers who provide you with the wrong password. Log Errors
    if your `authenticateUser` function fails so this information is available for
    security audits later on. For logging, either take the code from [Chapter 10](ch10.xhtml#chapter_story_logging)
    or implement a simpler version for logging as shown in the following.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，跟踪那些提供了错误密码的调用者。如果你的`authenticateUser`函数失败，记录错误信息，以便稍后进行安全审计。关于日志记录，可以使用[第10章](ch10.xhtml#chapter_story_logging)中的代码，或者实现一个更简单的日志记录版本如下所示。
- en: '| Pattern name | Summary |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Log Errors | Use different channels to provide error information that is
    relevant for the calling code and error information that is relevant for the developer.
    For example, write debug error information into a log file and don’t return the
    detailed debug error information to the caller. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 记录错误 | 使用不同的通道提供对调用代码相关和开发者相关的错误信息。例如，将调试错误信息写入日志文件，不要将详细的调试错误信息返回给调用者。 |'
- en: It is difficult to provide this logging mechanism on different platforms—for
    example on Linux as well as on Windows—because the different operating systems
    provide different functions for accessing files. Also, multiplatform code is hard
    to implement and maintain. So how can you implement your logging functionality
    as simply as possible? Make sure to Avoid Variants and to use standardized functions,
    which are available on all platforms.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同平台（例如Linux和Windows）上提供这种日志机制是困难的，因为不同的操作系统提供了不同的文件访问函数。此外，跨平台代码的实现和维护也很困难。那么，如何尽可能简单地实现您的日志功能呢？确保避免使用变体，并使用所有平台都可用的标准化函数。
- en: '| Pattern name | Summary |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Avoid Variants | Use standardized functions that are available on all platforms.
    If there are no standardized functions, consider not implementing the functionality.
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 避免使用变体 | 使用所有平台都可用的标准化函数。如果没有标准化函数，则考虑不实现该功能。 |'
- en: Luckily, the C standard defines functions for accessing files, and these can
    be used on Windows and Linux systems. While there are operating system–specific
    functions for accessing files which might be more performant or might provide
    you with operating system–specific features, these are not necessary here. Simply
    use the file access functions defined by the C standard.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，C标准定义了访问文件的函数，可以在Windows和Linux系统上使用。虽然各操作系统提供了访问文件的特定函数，可能更高效或提供特定于操作系统的功能，但这里并不需要。只需使用C标准定义的文件访问函数即可。
- en: 'To implement your logging functionality, call the following function if the
    wrong password was provided:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现您的日志功能，请在提供错误密码时调用以下函数：
- en: '*user.c*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.c*'
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_building_a_user_management_system_CO2-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_building_a_user_management_system_CO2-1)'
- en: Use the platform-independent functions `fopen`, `fwrite`, and `fclose`. This
    code works on Windows and Linux platforms, and there are no nasty `#ifdef` statements
    to handle the platform variants.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用跨平台的函数`fopen`、`fwrite`和`fclose`。这些代码可以在Windows和Linux平台上工作，而且没有复杂的`#ifdef`语句来处理不同的平台变体。
- en: For storing the log information, the code uses Stack First, because the log
    message is small enough to fit on the stack. This is also easiest for you because
    you don’t have to deal with memory cleanup.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储日志信息时，代码使用堆栈优先，因为日志消息足够小，可以放在堆栈上。对于您来说，这也是最简单的选择，因为您不必处理内存清理。
- en: '| Pattern name | Summary |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Stack First | Simply put your variables on the stack by default to profit
    from automatic cleanup of stack variables. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 堆栈优先 | 默认情况下将变量放在堆栈上，以便从自动清理堆栈变量中获益。 |'
- en: 'Adding Users: Error Handling'
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加用户：错误处理
- en: Looking at the whole code, you now have a function to check whether a password
    is correct for a username stored in your list, but your list of users is still
    empty. To fill your list of users, implement a function that allows the caller
    to add new users.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 查看整个代码后，您现在有一个函数可以检查密码是否正确匹配用户名列表中的用户名，但是您的用户列表仍然为空。为了填充用户列表，实现一个允许调用者添加新用户的函数。
- en: Make sure that the usernames are unique, and let the caller know whether adding
    the new user worked or not, either because the username already exists or because
    there is no more space in your user list.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 确保用户名是唯一的，并让调用者知道是否成功添加了新用户，无论是因为用户名已经存在还是因为用户列表中没有更多空间。
- en: Now you have to decide how you want to inform the caller about these error situations.
    Should you use the Return Value to return this information, or should you set
    the `errno` variable? Additionally, what kind of information will you provide
    the caller, and what data type will you use to return that information?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要决定如何通知调用者有关这些错误情况。您应该使用返回值返回此信息，还是应该设置`errno`变量？此外，您将向调用者提供什么类型的信息，并使用什么数据类型返回该信息？
- en: In this instance, Return Status Codes because you have different error situations
    and you want to inform your caller about these different situations. In addition,
    in case of invalid parameters, abort the program (Samurai Principle). Define the
    error codes in your interface to allow you and your caller to have a mutual understanding
    of how the error codes map to different error situations so the caller can react
    accordingly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，返回状态码，因为您有不同的错误情况，希望通知调用者这些不同的情况。此外，在参数无效的情况下，中止程序（武士原则）。在接口中定义错误代码，以便您和调用者了解这些错误代码如何映射到不同的错误情况，以便调用者可以相应地做出反应。
- en: '| Pattern name | Summary |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Return Status Codes | Use the Return Value of a function to return status
    information. Return a value that represents a specific status. Both of you as
    the callee and the caller must have a mutual understanding of what the value means.
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 返回状态码 | 使用函数的返回值来返回状态信息。返回一个代表特定状态的值。调用者和被调用者都必须彼此理解这个值的含义。 |'
- en: '*user.h*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.h*'
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, implement the `addUser` function. Check whether such a user already exists
    and then add the user. To separate these tasks, perform a Function Split to split
    the different tasks and responsibilities into different functions. First, implement
    a function to check whether the user already exists.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，实现`addUser`函数。检查是否已经存在这样的用户，然后添加用户。为了分离这些任务，执行函数分割，将不同的任务和责任分为不同的函数。首先，实现一个函数来检查用户是否已经存在。
- en: '| Pattern name | Summary |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Function Split | Split up the function. Take a part of a function that seems
    useful on its own, create a new function with that, and call that function. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 函数分割 | 将函数分割为几部分。从看起来单独有用的函数部分开始，创建一个新函数并调用该函数。 |'
- en: '*user.c*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.c*'
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This function can now be called inside the function that adds new users in order
    to add new users only if they don’t yet exist. Should you check for existing users
    at the beginning of the function or right before you add the user to the list?
    Which of these alternatives would make your function easier to read and maintain?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在添加新用户的函数内调用此函数，以便仅在用户尚不存在时添加新用户。您应该在函数的开始处还是在添加用户到列表之前检查现有用户？这两种选择中哪一种会使您的函数更易于阅读和维护？
- en: Implement a Guard Clause at the beginning of the function that will return immediately
    if the action cannot be performed because the user already exists. A check right
    at the beginning of the function makes it easier to follow the program flow.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数的开头实现守卫条款，如果由于用户已存在而无法执行操作，则立即返回。在函数开头进行检查可以更容易地跟踪程序流程。
- en: '| Pattern name | Summary |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Guard Clause | Check whether you have pre-conditions and immediately return
    from the function if these pre-conditions are not met. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 守护条款 | 检查是否存在前置条件，如果这些前置条件未满足，则立即从函数中返回。 |'
- en: '*user.c*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.c*'
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With the implemented code fragments so far, you can fill your user administration
    with users and to check whether a provided password is correct for these users.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，已实现的代码片段使您能够在用户管理中填充用户，并检查所提供的密码是否正确。
- en: Iterating
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代
- en: Next, provide some functionality to read out all usernames by implementing an
    iterator. While you may want to simply provide an interface that lets the caller
    access the `userList` array by index, you’d be in trouble if the underlying data
    structure changes (for example, to a linked list), or if the caller wants to access
    the array while another caller modifies the array.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过实现一个迭代器，提供一些功能以读取所有用户名。虽然你可能只想提供一个接口，让调用者通过索引访问`userList`数组，但如果底层数据结构发生变化（例如改为链表），或者调用者想在另一个调用者修改数组时访问数组，那么你将会遇到麻烦。
- en: To provide an iterator interface to the caller that solves the mentioned issues,
    implement a Cursor Iterator, which uses a Handle to hide the underlying data structure
    from the caller.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为调用者提供解决上述问题的迭代器接口，请实现一个光标迭代器，它使用一个句柄来隐藏调用者对底层数据结构的访问。
- en: '| Pattern name | Summary |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 摘要 |'
- en: '| --- | --- |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Cursor Iterator | Create an iterator instance that points to an element in
    the underlying data structure. An iteration function takes this iterator instance
    as argument, retrieves the element the iterator currently points to, and modifies
    the iteration instance to point to the next element. The user then iteratively
    calls this function to retrieve one element at a time. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 光标迭代器 | 创建一个指向底层数据结构中元素的迭代器实例。迭代函数以此迭代器实例作为参数，获取迭代器当前指向的元素，并修改迭代器实例以指向下一个元素。用户随后通过反复调用此函数来逐个获取元素。
    |'
- en: '| Handle | Have a function to create the context on which the caller operates
    and return an abstract pointer to internal data for that context. Require the
    caller to pass that pointer to all your functions, which can then use the internal
    data to store state information and resources. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 句柄 | 有一个函数来创建上下文，在该上下文上进行操作，并返回对内部数据的抽象指针。要求调用者将该指针传递给所有函数，这些函数可以使用内部数据来存储状态信息和资源。
    |'
- en: '*user.h*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.h*'
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The caller has full control of when to create and destroy the iterator. Thus,
    you have Dedicated Ownership with a Caller-Owned Instance. The caller can simply
    create the iterator Handle and use it to access the list of usernames. If creation
    fails, then the Special Return Value `NULL` indicates this. Having this Special
    Return Value instead of explicit error codes makes using the function easier because
    no additional function parameters are needed to return error information. When
    the caller is done with iterating, the caller can destroy the Handle.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 调用者完全控制何时创建和销毁迭代器。因此，您拥有调用者拥有实例的专有所有权。调用者只需创建迭代器句柄并使用它来访问用户名列表。如果创建失败，则特殊返回值`NULL`指示此情况。使用此特殊返回值而不是显式错误代码使函数使用更加简便，因为不需要额外的函数参数来返回错误信息。当调用者完成迭代时，可以销毁句柄。
- en: '| Pattern name | Summary |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 摘要 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Dedicated Ownership | Right at the time when you implement memory allocation,
    clearly define where it’s going to be cleaned up and who is going to do that.
    |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 专有所有权 | 在实现内存分配时，明确定义何时进行清理以及谁会执行清理。 |'
- en: '| Caller-Owned Instance | Require the caller to pass an instance, which is
    used to store resource and state information, along to your functions. Provide
    explicit functions to create and destroy these instances, so that the caller can
    determine their lifetime. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 调用者拥有实例 | 要求调用者传递一个实例，该实例用于存储资源和状态信息，并将其传递给您的函数。提供显式函数来创建和销毁这些实例，以便调用者可以确定它们的生命周期。
    |'
- en: '| Special Return Values | Use the Return Value of your function to return the
    data computed by the function. Reserve one or more special values to be returned
    if an error occurs. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 特殊返回值 | 使用函数的返回值来返回函数计算的数据。保留一个或多个特殊值，以便在发生错误时返回。 |'
- en: Because the interface provides the caller with explicit functions to create
    and destroy the iterator, this naturally leads to separate functions for initializing
    and cleaning up the resources for your iterator in the implementation. This Object-based
    Error Handling brings the advantage of nicely separated responsibilities in your
    functions, which makes them easier to extend if necessary later on. You can see
    this separation in the following code where all initialization code is in one
    function, and all cleanup code is in another function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因为接口为调用者提供了显式函数来创建和销毁迭代器，这自然地导致在实现中为初始化和清理迭代器资源编写单独的函数。基于对象的错误处理带来的优势是在函数中良好地分离了职责，如果将来需要扩展，这将使得函数更易于扩展。您可以在以下代码中看到此分离，其中所有初始化代码都在一个函数中，所有清理代码都在另一个函数中。
- en: '| Pattern name | Summary |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Object-Based Error Handling | Put initialization and cleanup into separate
    functions, similar to the concept of constructors and destructors in object-oriented
    programming. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 基于对象的错误处理 | 将初始化和清理分开放入单独的函数中，类似于面向对象编程中构造函数和析构函数的概念。 |'
- en: '*user.c*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*user.c*'
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When implementing the preceding code, how should you provide the username data
    to the caller? Should you simply provide the caller with a pointer to that data?
    If you copy that data into a buffer, who should allocate it?
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现上述代码时，您应如何向调用者提供用户名数据？您应该简单地向调用者提供指向该数据的指针吗？如果将数据复制到缓冲区中，谁应该分配它？
- en: In this situation, the Callee Allocates the string buffer. This makes it possible
    for the caller to have full access to that string without having the possibility
    of changing the data in the `userList`. Additionally, the caller avoids accessing
    data that might be changed by other callers at the same time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，被调用者分配字符串缓冲区。这使得调用者可以完全访问该字符串，而无需担心`userList`中的数据可能被其他调用者同时更改。此外，调用者避免了访问可能被其他调用者同时更改的数据。
- en: '| Pattern name | Summary |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 模式名称 | 概述 |'
- en: '| --- | --- |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Callee Allocates | Allocate a buffer with the required size inside the function
    that provides the large, complex data. Copy the required data into the buffer
    and return a pointer to that buffer. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 被调用者分配 | 在提供大型复杂数据的函数内分配一个具有所需大小的缓冲区。将所需的数据复制到缓冲区中，并返回指向该缓冲区的指针。 |'
- en: Using the User Management System
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用用户管理系统
- en: 'You have now completed your user management code. The following code shows
    how to use that user management system:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已完成用户管理代码。以下代码展示了如何使用该用户管理系统：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Throughout this chapter, the patterns helped you to design this final piece
    of code. Now you can tell your boss you completed the task of implementing the
    requested system for storing usernames and passwords. By utilizing pattern-based
    design for that system, you rely on documented solutions that are proven in use.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，这些模式帮助您设计了这个最终代码片段。现在您可以告诉老板，您已完成了实现存储用户名和密码请求系统的任务。通过利用基于模式的设计来设计该系统，您依赖于已被证明在使用中的文档化解决方案。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: You constructed the code in this chapter step by step by applying the patterns
    presented in [Part I](part01.xhtml#part_1) in order to solve one problem after
    another. At the start you had many questions on how to organize the files and
    how to cope with error handling. The patterns showed you the way. They gave you
    guidance and made it easier to construct this piece of code. They also provide
    understanding as to why the code looks and behaves the way it does. Throughout
    this chapter, you applied the patterns shown in [Figure 11-2](#fig_story2_patterns).
    In the figure, you can see how many decisions you had to make and how many decisions
    were guided by the patterns.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过应用[第一部分](part01.xhtml#part_1)中展示的模式一步一步地构建了本章的代码。一开始，您对如何组织文件和如何处理错误有很多问题。模式向您展示了解决问题的途径。它们为您提供了指导，并使得构建这段代码变得更加容易。它们还解释了代码看起来和行为方式的原因。在本章中，您应用了[图 11-2](#fig_story2_patterns)中展示的模式。在图中，您可以看到您需要做出多少决策，以及这些决策受模式指导的情况。
- en: The constructed user administration system contains basic functionalities to
    add, find, and authenticate users. Again, there are many other functionalities
    that could be added to that system, like the functionality to change passwords,
    to not store them in plain text, or to check that the passwords meet some security
    criteria. The advanced functionality is not addressed in this chapter to make
    the pattern application easier to grasp.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 构建的用户管理系统包含基本功能，如添加、查找和验证用户。再次强调，该系统可以添加许多其他功能，比如更改密码功能，避免明文存储密码，或检查密码是否符合某些安全标准。本章节未涉及高级功能，以便更容易理解模式应用。
- en: '![fluc 1102](assets/fluc_1102.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![fluc 1102](assets/fluc_1102.png)'
- en: Figure 11-2\. The patterns applied throughout this story
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. 故事中应用的模式

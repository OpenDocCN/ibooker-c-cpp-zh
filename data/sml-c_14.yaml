- en: Appendix B. printf() Format Specifier Details
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B. `printf()` 格式说明符细节
- en: The formats supported by the `printf()` function almost comprise their own language.
    While not an exhaustive list, this appendix details all of the options I use throughout
    this book. I also describe how the options work with the different types of output,
    even if I do not use a given combination. As with so much of programming, it is
    useful to try stuff out yourself to see how the pieces fit together.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf()` 函数支持的格式几乎构成了它们自己的语言。 虽然不是详尽的列表，本附录详细描述了我在本书中使用的所有选项。 我还描述了这些选项如何与不同类型的输出配合工作，即使我没有使用某个组合。
    就像编程中的许多内容一样，自己尝试一下是很有用的，以便了解各部分如何配合。'
- en: The code examples include a simple C program that goes through the more popular
    combinations of flags, widths, precisions, and types. You can compile and run
    *popular_formats.c* as is, or you can edit it to tweak some of the lines and test
    your own combinations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例包括一个简单的 C 程序，演示了更流行的标志、宽度、精度和类型组合。 您可以按原样编译和运行 *popular_formats.c*，或者您可以编辑它以调整某些行并测试自己的组合。
- en: If you want to know even more about the things you can specify in `printf()`,
    including nonstandard and implementation-specific options, I recommend the Wikipedia
    page devoted to [just this topic](https://oreil.ly/Adirl).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更多了解您可以在 `printf()` 中指定的事项，包括非标准和特定于实现的选项，我建议查看专门介绍[此主题](https://oreil.ly/Adirl)的维基百科页面。
- en: Specifier Syntax
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 说明符语法
- en: 'The specifier as I use it throughout this book contains three optional elements
    and one required type arranged like so:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中使用的说明符包含三个可选元素和一个必需的类型，排列如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Again, the flag (or flags), width, and precision are not required.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，并不需要标志（或标志）、宽度和精度。
- en: Specifier Types
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 说明符类型
- en: How `printf()` interprets a given value to print depends on the type specifier
    you use. The value 65, for example, would print as the letter “A” with `%c` (characters)
    but as “41” with `%x` (hexadecimal integers). [Table B-1](#smallerc-APP-B-TAB-printf-types)
    summarizes the types we have used throughout this book, although it is not an
    exhaustive list.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `printf()` 时，打印给定值的解释取决于您使用的类型说明符。 例如，值 65 使用 `%c`（字符）会打印为字母“A”，但使用 `%x`（十六进制整数）会打印为“41”。
    [表 B-1](#smallerc-APP-B-TAB-printf-types) 概述了本书中使用的类型，尽管这不是详尽的列表。
- en: Table B-1\. Format specifier types for `printf()`
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 表 B-1\. `printf()` 的格式说明符类型
- en: '| Specifier | Type(s) | Description |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 说明符 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `%c` | `char` | Print out a single character |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `%c` | `char` | 打印单个字符 |'
- en: '| `%d` | `char, int, short, long` | Print signed integer values in decimal
    (base 10) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | `char, int, short, long` | 以十进制（基数 10）打印有符号整数值 |'
- en: '| `%f` | `float, double` | Print floating point values |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `%f` | `float, double` | 打印浮点数值 |'
- en: '| `%i` | `char, int, short` | Print integer values in base 10 (same as `%d`
    for output) |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `%i` | `char, int, short` | 以十进制（与 `%d` 相同的输出）打印整数值 |'
- en: '| `%o` | `int, short, long` | Print integer values in octal (base 8) |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `%o` | `int, short, long` | 以八进制（基数 8）打印整数值 |'
- en: '| `%p` | address | Print pointers (as hexadecimal address) |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `%p` | 地址 | 打印指针（作为十六进制地址） |'
- en: '| `%s` | `char[]` | Print a string (array of char) as text |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `%s` | `char[]` | 将字符串（char 数组）打印为文本 |'
- en: '| `%u` | `unsigned (char, int, short)` | Print unsigned integer values in decimal
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `%u` | `unsigned (char, int, short)` | 以十进制打印无符号整数值 |'
- en: '| `%x` | `char, int, short, long` | Print integer values in hexadecimal (base
    16) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `%x` | `char, int, short, long` | 以十六进制（基数 16）打印整数值 |'
- en: The `%i` and `%u` integer types can use length modifiers. `l` or `ll` (e.g.,
    `%li` or `%llu`) tell `printf()` to expect `long` or `long long` length arguments.
    For floating point types, `L` can be used (e.g., `%Ld`) to indicate a `long double`
    argument.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`%i` 和 `%u` 整数类型可以使用长度修饰符。 `l` 或 `ll`（例如 `%li` 或 `%llu`）告诉 `printf()` 期望 `long`
    或 `long long` 长度的参数。 对于浮点类型，可以使用 `L`（例如 `%Ld`）来指示 `long double` 参数。'
- en: Specifier Flags
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 说明符标志
- en: Each type you specify can be modified with one or more flags. [Table B-2](#smallerc-APP-B-TAB-printf-flags)
    lists the specifier flags. Not all flags have an effect on every type, and all
    flags are optional.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您指定的每种类型都可以使用一个或多个标志进行修改。 [表 B-2](#smallerc-APP-B-TAB-printf-flags) 列出了说明符标志。
    并非所有标志对每种类型都有效，所有标志都是可选的。
- en: Table B-2\. Format specifier flags for `printf()`
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 表 B-2\. `printf()` 的格式说明符标志
- en: '| Specifier | Description |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 说明符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-` | Left-align output within its field |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 在其字段内左对齐输出 |'
- en: '| `+` | Force plus sign (`+`) prefix on positive numeric values |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 强制在正数值前加上加号（`+`）前缀 |'
- en: '| `(space)` | Force space prefix on positive numeric values (as opposed to
    no prefix at all) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `(space)` | 强制在正数值前加空格前缀（与完全没有前缀相对应）。'
- en: '| `0` | Pad left of numeric values with 0s (if they do not fill a field where
    width is specified) |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `0` | 在数值左侧用 0 填充（如果它们没有填满指定宽度的字段）。'
- en: '| `#` | Print a prefix (`0`, `0x`, or `0X`) when used with `o`, `x`, or `X`
    types |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `#` | 在与 `o`、`x` 或 `X` 类型一起使用时打印前缀（`0`、`0x` 或 `0X`）。'
- en: You see these flags used more often when you have numeric, columnar output,
    although flags like the “-” can be used on strings as well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有数值、列式输出时，更常见使用这些标志，尽管像“-”这样的标志也可以用在字符串上。
- en: Width and Precision
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宽度和精度
- en: For any specifier, you can supply a minimum width for the output field. (The
    minimum qualifier means that no truncation occurs for values that are larger than
    the given width.) The default is to align output to the right, but that can be
    changed with the `-` flag noted in [Table B-2](#smallerc-APP-B-TAB-printf-flags).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何说明符，你可以为输出字段提供一个最小宽度。（最小限定符意味着对于大于给定宽度的值不会发生截断。）默认是右对齐输出，但可以通过在[表 B-2](#smallerc-APP-B-TAB-printf-flags)中提到的“-”标志进行更改。
- en: You can also supply a precision, which can affect the maximum width for output.
    For floating point types, it dictates the number of digits to the right of the
    decimal separator. For strings, it truncates over-long values. It is ignored for
    integer types.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以提供一个精度，这会影响输出的最大宽度。对于浮点类型，它指定小数点右侧的数字位数。对于字符串，它会截断过长的值。对于整数类型，它会被忽略。
- en: Common Formats
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见格式
- en: 'To see some of the more common or popular formats in action, take a look at
    [*appB/popular_formats.c*](https://oreil.ly/R2vNI). It’s just a big batch of `printf()`
    calls, but it contains a wide variety of examples using different format specifiers.
    I won’t bother with the source listing here, but the output makes for a quick
    reference:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看一些更常见或流行的格式的实际应用，请看一下[*appB/popular_formats.c*](https://oreil.ly/R2vNI)。这只是一个大批量的
    `printf()` 调用，但它包含了使用不同格式说明符的各种示例。我在这里不会列出源代码，但输出可供快速参考：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Wikipedia page on the [printf format string](https://oreil.ly/xvtiC) has
    a comprehensive overview of the options available.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Wikipedia 页面上关于[printf 格式字符串](https://oreil.ly/xvtiC)有一个详尽的选项概述。

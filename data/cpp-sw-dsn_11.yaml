- en: Chapter 11\. The Last Guideline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。最后的指导原则
- en: 'There is only one more guideline, one more piece of advice that I can bestow
    upon you. So here it is: the last guideline.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个指导原则，一个我可以给予你的建议。所以在这里：最后的指导原则。
- en: 'Guideline 39: Continue to Learn About Design Patterns'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指导原则39：继续学习设计模式
- en: '“That’s it? This is all you’ve got? Come on, there are so many more design
    patterns out there. We barely touched the surface!” you say. Well, honestly, you
    are completely correct; there is nothing I can add to that. But in my defense,
    I was planning for many more patterns until reality struck me: there is only so
    much information that you can fit into a book with 400 pages. But don’t fret:
    in these 400 pages I’ve taken you on a journey through the most important pieces
    of advice for any design that you will need anywhere, anytime in your software
    development career:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “就这样？这就是你所能给予的全部吗？来吧，还有那么多其他的设计模式。我们几乎没有涉及到表面！”你说。好吧，老实说，你完全正确；我无法对此做出任何补充。但是为了辩护，我原本计划介绍更多的模式，直到现实打击我：在一本有400页的书中，你可以容纳的信息是有限的。但不要担心：在这400页中，我已经带领你走过了任何设计中最重要的建议，这些建议将在您的软件开发生涯中的任何地方、任何时候都需要：
- en: Minimize dependencies
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化依赖关系
- en: 'Dealing with dependencies is the core of software design. And whatever kind
    of software you write, if you are seriously interested in making it last, you
    will have to deal with dependencies: the necessary ones, but primarily the artificial
    ones. Of course, your major goal is to reduce dependencies and hopefully even
    minimize them. To achieve this goal, you will inevitably deal with design patterns.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 处理依赖关系是软件设计的核心。无论您编写什么类型的软件，如果您真正希望使其持久，您将不得不处理依赖关系：必要的依赖关系，但主要是人为的依赖关系。当然，您的主要目标是减少依赖关系，甚至希望将其最小化。为了实现这一目标，您将不可避免地涉及设计模式。
- en: Separate concerns
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 分离关注点
- en: This may be the most important, central design guideline that you can take away
    from this book. Separate concerns and your software structures will detangle and
    become easier to understand, change, and test. All design patterns, without exception,
    provide you with some way to separate concerns. The major difference between patterns
    is the way they separate concerns, their *intent*. Although design patterns may
    be structurally similar, their intent is always unique.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是您从本书中学到的最重要、最核心的设计指导原则。分离关注点，您的软件结构将变得更加清晰，更容易理解、更易于修改和测试。所有的设计模式，毫无例外，都为您提供了一种分离关注点的方式。模式之间的主要区别在于它们分离关注点的方式，它们的*意图*。尽管设计模式在结构上可能相似，但它们的意图始终是独特的。
- en: Prefer composition to inheritance
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 更倾向于组合而非继承
- en: While inheritance is a powerful feature, the true strength of many design patterns
    stems from building on composition. For instance, the Strategy design pattern,
    one of the patterns that is used *everywhere* (and hopefully this has become obvious
    by now), primarily builds on composition to separate concerns, but then also offers
    you the option to use inheritance to extend the functionality. The same is true
    for Bridge, Adapter, Decorator, External Polymorphism, and Type Erasure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然继承是一个强大的特性，但许多设计模式的真正优势源于构建在组合之上。例如，策略设计模式，这是一个被*广泛应用*的模式（希望现在这一点已经显而易见），主要是基于组合来分离关注点，但同时也为您提供了使用继承来扩展功能的选项。桥接、适配器、装饰器、外部多态性和类型擦除也是如此。
- en: Prefer a nonintrusive design
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 更倾向于非侵入性设计
- en: True flexibility and extendibility arise when it isn’t necessary to modify existing
    code but possible to just add new code. Therefore, any design that is nonintrusive
    is preferable to design that intrusively modifies existing code. Hence, design
    patterns such as Decorator, Adapter, External Polymorphism, and Type Erasure are
    such valuable additions to your design pattern toolbox.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的灵活性和可扩展性是当不需要修改现有代码而只需添加新代码时才会出现。因此，任何非侵入性的设计都优于侵入性修改现有代码的设计。因此，装饰器、适配器、外部多态性和类型擦除等设计模式是您设计模式工具箱中如此宝贵的补充。
- en: Prefer *value semantics* over *reference semantics*
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 更倾向于*值语义*而非*引用语义*
- en: To keep code simple, understandable, and away from dark corners such as nullptrs,
    dangling pointers, lifetime dependencies, etc., you should prefer to employ values
    instead of pointers and references. And C++ is a wonderful language to use for
    that purpose, as C++ takes value semantics seriously. It allows you, the developer,
    to live a happy life in the realm of value semantics. Surprisingly, as we have
    seen with `std::variant` and Type Erasure, this philosophy does not necessarily
    have a negative performance impact but may even increase performance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持代码简单、易于理解，并远离空指针、悬空指针、生命周期依赖等问题，您应该更倾向于使用值而不是指针和引用。而C++是一个非常适合这个目的的语言，因为C++严肃对待值语义。它允许您作为开发者在值语义的领域过上幸福的生活。令人惊讶的是，正如我们在`std::variant`和类型擦除中看到的，这种哲学不一定会带来负面的性能影响，甚至可能提高性能。
- en: In addition to these general pieces of advice about software design, you have
    gained insight into the purpose of design patterns. Now you know what a design
    pattern is.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些关于软件设计的一般建议，您已经对设计模式的目的有了深入的了解。现在您知道什么是设计模式了。
- en: 'A design pattern:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式：
- en: Has a name
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个名称
- en: Carries an intent
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承载一种意图
- en: Introduces an abstraction
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入一种抽象
- en: Has been proven
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已被证明
- en: 'Equipped with this information, you will no longer fall for false claims about
    some implementation detail being a design pattern (as I have been confronted with
    multiple times in my career), for instance, the claim that smart pointers (`std::unique_ptr`,
    `std::shared_ptr`, etc.) or factory functions such as `std::make_unique()` are
    implementations of design patterns. Also, you are now familiar with several of
    the most important and useful design patterns, which will prove to be useful again
    and again:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些信息，您将不再受到一些关于某些实现细节是设计模式的虚假说法的影响（在我的职业生涯中多次遇到），例如智能指针（`std::unique_ptr`、`std::shared_ptr`等）或工厂函数（如`std::make_unique()`）是设计模式的实现。此外，您现在熟悉几种最重要和最有用的设计模式，这将一次又一次地证明其用处：
- en: '*Visitor*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*Visitor*'
- en: To extend operations on a closed set of types, reach for the Visitor design
    pattern (possibly realized by `std::variant`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要在一组封闭类型上扩展操作，请考虑访问者设计模式（可能通过`std::variant`实现）。
- en: '*Strategy*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*Strategy*'
- en: To configure the behavior and “inject” it from outside, pick the Strategy design
    pattern (aka policy-based design).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置行为并从外部“注入”它，请选择策略设计模式（又称基于策略的设计）。
- en: '*Command*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*Command*'
- en: To abstract from different kinds of operations, possibly undoable operations,
    utilize the Command design pattern.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要从不同类型的操作中抽象出来，可能是可撤销操作，请使用命令设计模式。
- en: '*Observer*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*Observer*'
- en: To observe state change in some entities, choose the Observer design pattern.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要观察实体状态变化，请选择观察者设计模式。
- en: '*Adapter*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*Adapter*'
- en: To adapt one interface to another one, nonintrusively, without changing code,
    use the Adapter design pattern.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要非侵入地将一个接口适配到另一个接口，请使用适配器设计模式。
- en: '*CRTP*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*CRTP*'
- en: For a static abstraction, free of virtual functions (and you can’t employ C++20
    concepts yet), then apply the CRTP design pattern. CRTP might also prove to be
    useful to create compile-time mixin classes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得无虚函数的静态抽象（并且目前你还不能使用C++20的概念），那么应用CRTP设计模式。CRTP可能也会被证明对创建编译时混入类非常有用。
- en: '*Bridge*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bridge*'
- en: To hide implementation details and reduce physical dependencies, make use of
    the Bridge design pattern.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要隐藏实现细节并减少物理依赖，利用桥接设计模式。
- en: '*Prototype*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*Prototype*'
- en: To create a virtual copy, the Prototype design pattern is the right choice.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建虚拟副本，原型设计模式是正确的选择。
- en: '*External Polymorphism*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*External Polymorphism*'
- en: To promote loose coupling by adding polymorphic behavior externally, remember
    the External Polymorphism design pattern.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过添加外部多态行为来促进松散耦合，请记住外部多态设计模式。
- en: '*Type Erasure*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*Type Erasure*'
- en: For the power of External Polymorphism in combination with the advantages of
    value semantics, consider the Type Erasure design pattern.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要结合值语义的优势实现外部多态性，考虑使用类型擦除设计模式。
- en: '*Decorator*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*Decorator*'
- en: To nonintrusively add responsibilities to an object, opt for the benefits of
    the Decorator design pattern.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要非侵入地向对象添加责任，请选择装饰器设计模式的益处。
- en: 'However, there are more design patterns. Many more! Also a lot of important
    and useful design patterns. Therefore, you should continue to learn about design
    patterns. And there are two ways to do that. First is getting to know more patterns:
    learn about their intent and about their similarities and differences compared
    to other design patterns. Also, don’t forget that design patterns are about a
    dependency structure, not about implementation details. Second, you should also
    get a better understanding about each pattern and experience their advantages
    and shortcomings. For that purpose, keep an eye out for design patterns used in
    the codebases you work on. I promise you, you will find many of them: any attempt
    to manage and reduce dependencies is very likely proof of a design pattern. So
    yes, design patterns are everywhere!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，设计模式还有更多。非常多！还有许多重要且有用的设计模式。因此，你应该继续学习设计模式。而且有两种方法可以做到这一点。首先是了解更多模式：了解它们的意图，以及与其他设计模式相比的相似之处和差异。此外，不要忘记设计模式关注的是依赖结构，而不是实现细节。其次，你还应该更好地理解每个模式，并体验它们的优势和不足。为此，要密切关注你所工作的代码库中使用的设计模式。我向你保证，你会找到许多设计模式：任何试图管理和减少依赖关系的尝试都很可能是设计模式的证明。所以是的，设计模式无处不在！

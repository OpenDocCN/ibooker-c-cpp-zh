- en: Chapter 12\. Next Next Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。接下来的步骤
- en: First off, congratulations for making it this far! We have toured a pretty impressive
    breadth of the C programming language and the Arduino microcontroller ecosystem.
    Remember that first “Hello, World” program or that first blinking LED? You know
    a lot more about both worlds now, and I hope you’re eager to continue expanding
    your skills.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，恭喜你走到了这一步！我们已经游览了 C 编程语言和 Arduino 微控制器生态系统的广阔领域。还记得那个第一个“Hello, World”程序或者第一个闪烁的
    LED 吗？现在你对这两个世界的了解更加深入了，我希望你渴望继续扩展你的技能。
- en: In this final chapter, we’ll look at one last project that connects your Arduino
    skills to the Internet of Things. The world of IoT is growing daily and will provide
    plenty of opportunities to try out new things, but we’ll also cover a few other
    topics you might look into next.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们将看看最后一个项目，将你的 Arduino 技能与物联网连接起来。物联网的世界每天都在增长，将提供丰富的机会让你尝试新事物，但我们也将涵盖一些你可能感兴趣的其他话题。
- en: Intermediate and Advanced Topics
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中级和高级话题
- en: There are so many paths you can take from here. The array of sensors and displays
    available these days is truly astonishing. Go exploring! You’ll find your own
    inspirations and projects to tackle, which will lead to more exploring and more
    inspiration. My most enjoyable adventures have come from specific project ideas.
    I wanted an animated LED hourglass for part of a Halloween costume, so I found
    a capable, wearable microcontroller and some dense LED strips.^([1](ch12.xhtml#idm45018711193992))
    I had such fun with the LEDs on that project that I decided to create some weatherproof
    lighting for my backyard. With WiFi available to makers like us on small budgets,
    I could even let guests pick the colors and other effects. The success of the
    WiFi feature in turn propelled me to create a miniature weather station to feed
    my inner meteorologist.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，你可以选择很多不同的路径。如今可用的传感器和显示设备的种类真是令人惊讶。去探索吧！你会发现自己的灵感和要完成的项目，这将带来更多的探索和灵感。我最享受的冒险来自于特定的项目想法。我想要一个在万圣节服装中使用的动态
    LED 沙漏，所以我找到了一个适合的可穿戴微控制器和一些密集的 LED 条[^1]。我在那个项目中与 LED 玩得很开心，所以我决定为我的后院创造一些防水照明。由于像我们这样预算有限的制造商可以使用
    WiFi，我甚至可以让客人选择颜色和其他效果。WiFi 功能的成功反过来推动我创建了一个迷你气象站来满足我内心的气象学家。
- en: The key to success for all those projects was picking a fairly focused goal.
    For example, in the next section we’ll dip our toes into the world of IoT with
    a simple project that takes a temperature reading from the TMP36 components we’ve
    used already and reports it to a cloud service over WiFi. If you really want to
    cement the new knowledge and skills you’ve gained through the projects and examples
    in this book, pick your own mini project and make it a reality!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些项目成功的关键是选择一个相对集中的目标。例如，在下一节中，我们将通过一个简单的项目进入物联网的世界，从我们已经使用过的 TMP36 组件获取温度读数，并通过
    WiFi 报告到云服务。如果你真的想通过本书中的项目和示例所获得的新知识和技能，来巩固你的学习成果，那就选择自己的小项目，并将其变为现实！
- en: IoT and Arduino
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物联网和 Arduino
- en: It wouldn’t do to have a chapter with no code, so let’s look at one last project
    that introduces some really fun avenues you can explore on the way to creating
    your own gadgets. The Internet of Things is exploding, and Arduino is perfectly
    suited for playing in that space. Let’s look at a simplified version of my weather
    station project. We’ll use a WiFi-capable microcontroller to report sensor data
    to a cloud API.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有代码就不算是一章，所以让我们来看看最后一个项目，介绍一些非常有趣的路径，你可以探索一下，然后开始制作自己的小工具。物联网正在蓬勃发展，而 Arduino
    正好适合在这个领域中发挥作用。让我们来看看我的简化版气象站项目。我们将使用一个支持 WiFi 的微控制器来向云端 API 报告传感器数据。
- en: The circuit for this project is fairly simple. We need a WiFi-capable microcontroller
    or a WiFi breakout that you can connect to your controller like we did with the
    RF breakout in [“Importing Custom Libraries”](ch11.xhtml#smallerc-CHP-11-SECT-3).
    I chose the [HUZZAH32 Feather](https://oreil.ly/aySPa) from Adafruit. It has some
    impressive specs like more than 500KB of SRAM and 4MB of flash in addition to
    the integrated WiFi support. The sensor is the same TMP36 we used in [“Sensors
    and Analog Input”](ch09.xhtml#smallerc-CHP-9-SECT-2.1). I also added an OLED display
    so I could watch the output without being tied to a computer to access the Serial
    Monitor, but this display is definitely optional. [Figure 12-1](#smallerc-CHP-12-FIG-iot-wiring-pic)
    shows the wiring diagram and my actual “station” up and running on a breadboard.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的电路非常简单。我们需要一个支持WiFi的微控制器或WiFi断开连接器，您可以像我们在[“导入自定义库”](ch11.xhtml#smallerc-CHP-11-SECT-3)中使用RF断开连接器一样将其连接到控制器。我选择了来自Adafruit的[HUZZAH32
    Feather](https://oreil.ly/aySPa)。除了集成的WiFi支持外，它还具有一些令人印象深刻的规格，如超过500KB的SRAM和4MB的闪存。传感器与我们在[“传感器和模拟输入”](ch09.xhtml#smallerc-CHP-9-SECT-2.1)中使用的TMP36相同。我还添加了一个OLED显示屏，这样我就可以在不被绑定到计算机访问串行监视器的情况下观看输出，但这个显示屏绝对是可选的。[图 12-1](#smallerc-CHP-12-FIG-iot-wiring-pic)显示了接线图和我的实际“站点”在面包板上运行的情况。
- en: '![smac 1201](Images/smac_1201.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![smac 1201](Images/smac_1201.png)'
- en: Figure 12-1\. Connecting the HUZZAH32, TMP36, and OLED
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1\. 连接HUZZAH32、TMP36和OLED
- en: The OLED uses a library provided by Adafruit that you can import through the
    Manage Libraries dialog of the IDE. Enter **`SSD1306`** in the search field and
    look for the “Adafruit SSD1306” library. It should be close to the top.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OLED使用Adafruit提供的库，您可以通过IDE的“管理库”对话框导入。在搜索字段中输入**`SSD1306`**，然后查找“Adafruit SSD1306”库。它应该在列表的靠前位置。
- en: We also need to pick a cloud service provider and find a library for communicating
    with them. I use [Adafruit.io](https://io.adafruit.com) for these types of projects,
    but any IoT cloud service will likely work. AWS, Google, and Azure all have IoT
    solutions, for example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要选择一个云服务提供商并找到与他们通信的库。我在这类项目中使用[Adafruit.io](https://io.adafruit.com)，但任何物联网云服务都可能适用。例如，AWS、Google和Azure都有物联网解决方案。
- en: For Adafruit.io, we can use the Library Manager to find our communication library.
    Search for “adafruit io arduino” and then scroll down a bit to find the actual
    library called “Adafruit IO Arduino.” Installing this library requires quite a
    few dependencies, such as the HTTP and message queue libraries, but the Library
    Manager will handle that for you automatically and prompt you to install those
    dependencies. You might have some of the listed dependencies like the NeoPixel
    library already, but the Library Manager isn’t quite smart enough to show only
    the missing ones. When you do install the dependencies, though, only those that
    are missing will be added.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Adafruit.io，我们可以使用库管理器找到我们的通信库。搜索“adafruit io arduino”，然后向下滚动一点找到名为“Adafruit
    IO Arduino”的实际库。安装此库需要安装一些依赖项，如HTTP和消息队列库，但库管理器会自动处理并提示您安装这些依赖项。您可能已经安装了列出的某些依赖项，例如NeoPixel库，但库管理器还不够智能，无法仅显示缺少的依赖项。但是，当您安装依赖项时，只会添加缺少的部分。
- en: 'I won’t go through the details of signing up, but once you have an account
    with your chosen provider, you’ll almost certainly need a few credentials to configure
    the library. Adafruit.io, for example, requires a unique username and access key.
    Let’s put this cloud service information in a separate [*config.h*](https://oreil.ly/t6UO6)
    file where we can also include our WiFi details:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细介绍注册的细节，但是一旦您在所选提供商那里有了帐户，几乎肯定需要一些凭据来配置库。例如，Adafruit.io需要一个唯一的用户名和访问密钥。让我们将这些云服务信息放在一个单独的[*config.h*](https://oreil.ly/t6UO6)文件中，我们还可以在其中包含我们的WiFi详细信息：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Happily, that library also contains a more generic WiFi library as a dependency.
    That double duty is nice for us—we don’t have to go through separate steps to
    configure both the WiFi and our access to the cloud. But we do still have to do
    a little bit of setup work to make sure we can communicate with the cloud. We’ll
    add that code in with the stuff necessary to use our nifty OLED display in the
    `setup()` function. As always, feel free to type this in yourself, or grab [*ch12/temp_web/temp_web.ino*](https://oreil.ly/muYAu):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，该库还包含一个更通用的WiFi库作为依赖项。对我们来说，这种双重用途非常好—我们不必分开配置WiFi和云访问。但我们仍然需要做一些设置工作，以确保可以与云进行通信。我们将在`setup()`函数中添加该代码，以及用于使用我们的精美OLED显示器所需的内容。像往常一样，随意自己输入此内容，或者获取[*ch12/temp_web/temp_web.ino*](https://oreil.ly/muYAu)。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_next_next_steps_CO1-1)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_next_next_steps_CO1-1)'
- en: Include the various header files needed to communicate with the libraries that
    draw on our OLED.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 包括与我们的OLED通信所需的各种头文件。
- en: '[![2](Images/2.png)](#co_next_next_steps_CO1-2)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_next_next_steps_CO1-2)'
- en: With the credentials from *config.h*, create an I/O object (`io`) and establish
    a connection to the Adafruit IO service, then specify which feed we will update.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*config.h*中的凭据创建一个I/O对象(`io`)，并建立到Adafruit IO服务的连接，然后指定我们将更新的feed。
- en: '[![3](Images/3.png)](#co_next_next_steps_CO1-3)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_next_next_steps_CO1-3)'
- en: Instantiate our `display` object using constants and referencing the `Wire`
    library.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用常量和引用`Wire`库来实例化我们的`display`对象。
- en: '[![4](Images/4.png)](#co_next_next_steps_CO1-4)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_next_next_steps_CO1-4)'
- en: Attempt to connect to the display. If that fails, print an error message and
    do not continue. If you do get stuck here, it’s likely a problem in your wiring.
    Double-check the connections and make sure your display also has power.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试连接显示器。如果连接失败，请打印错误消息并停止执行。如果在此处卡住，可能是电路连接问题。请再次检查连接，并确保显示器有电源。
- en: '[![5](Images/5.png)](#co_next_next_steps_CO1-5)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_next_next_steps_CO1-5)'
- en: Make sure we can use the feed from ![2](Images/2.png). Wait (potentially forever)
    until it’s ready. If you can’t connect, you might try using your credentials in
    a browser to verify the combination of user and key works. You can also test out
    your WiFi connection with a separate project. Under the File menu in the IDE,
    look for the Examples submenu, find your board, and pick something simple like
    *HTTPClient*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们可以使用![2](Images/2.png)的feed。等待（可能永远）直到准备就绪。如果无法连接，可以尝试在浏览器中使用您的凭据来验证用户和密钥的组合是否有效。您也可以使用单独的项目测试WiFi连接。在IDE的文件菜单下，查找示例子菜单，找到您的板子，并选择像*HTTPClient*这样简单的示例。
- en: '[![6](Images/6.png)](#co_next_next_steps_CO1-6)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_next_next_steps_CO1-6)'
- en: Read the current analog value from our TMP36 sensor and update the average,
    running temperature.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从TMP36传感器读取当前的模拟值，并更新平均运行温度。
- en: '[![7](Images/7.png)](#co_next_next_steps_CO1-7)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](Images/7.png)](#co_next_next_steps_CO1-7)'
- en: Update our display with some nice text on the temperature and the current cloud
    status. The API for this display is similar to the functions we use with `Serial`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与我们用于`Serial`的函数类似的API，在我们的显示器上更新一些关于温度和当前云状态的好文本。
- en: '[![8](Images/8.png)](#co_next_next_steps_CO1-8)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](Images/8.png)](#co_next_next_steps_CO1-8)'
- en: Once a minute, report the simple temperature in Fahrenheit to our feed. The
    next time through `loop()`, we’ll note the update in our status line on the OLED.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每隔一分钟，向我们的feed报告华氏温度。通过`loop()`的下一次，我们将在我们的OLED状态行中注意到更新。
- en: You can certainly turn controllers like the HUZZAH32 into their own web servers
    and just get readings directly in your browser, but services like Adafuit.io make
    it easy to get fancier reports, such as the small graph of temperatures over a
    few minutes shown in [Figure 12-2](#smallerc-CHP-12-FIG-iot-graph). These services
    typically support connecting to yet more services as well. For example, [If This
    Then That (IFTTT)](https://ifttt.com) allows you to use events reported to Adafruit.io
    to trigger actions like sending an email or turning on smart home devices.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您当然可以将像HUZZAH32这样的控制器变成自己的Web服务器，并直接在浏览器中获取读数，但Adafuit.io等服务使得获取更复杂的报告变得简单，例如在几分钟内显示的温度小图表（见[图 12-2](#smallerc-CHP-12-FIG-iot-graph)）。
- en: '![smac 1202](Images/smac_1202.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![smac 1202](Images/smac_1202.png)'
- en: Figure 12-2\. Graph of our reported temperatures
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-2\. 我们报告的温度图表
- en: This little project is just the briefest of introductions to the Internet of
    Things. Heck, just the fun combinations possible through IFTTT could fill their
    own book. IoT books and blog posts abound, covering everything from user interface
    design for small devices to enterprise mesh configurations. This is a fun, dynamic
    area, and you certainly have the skills to dive in if you’re curious to learn
    more.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小项目只是对物联网的极简介绍。说实话，仅仅通过IFTTT可能就可以填写一本书了。物联网书籍和博客文章随处可见，涵盖了从小设备用户界面设计到企业网格配置的所有内容。这是一个有趣、充满活力的领域，如果你对更多了解感兴趣，你当然有能力深入研究。
- en: Arduino Source Code
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino源代码
- en: There are so many neat Arduino projects out there and so many of their authors
    are doing it for the joy of creating. They put their hardware specs and source
    code online and actively participate in the [Arduino forums](https://forum.arduino.cc).
    I heartily encourage you to read some of that source code. You have the skills
    to understand the code in those projects now, and seeing how other programmers
    tackle problems can help you learn new tricks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里有许多精彩的Arduino项目，它们的作者们大多出于创造的乐趣在进行。他们将硬件规格和源代码放在网上，并积极参与[Arduino论坛](https://forum.arduino.cc)。我真诚地鼓励你阅读其中一些源代码。你现在有能力理解这些项目中的代码，看看其他程序员是如何解决问题的，这可以帮助你学到新的技巧。
- en: You can also access the [source code](https://oreil.ly/ekC2v) behind the many
    boards supported out of the gate by the Arduino IDE. The various ArduinoCore packages
    cover the C and C++ content that goes into the Arduino “language” we discussed
    in [“The Arduino Environment”](ch09.xhtml#smallerC-CHP-9-SECT-1). It’ll be dense
    reading, to be sure, but you might be surprised how much of the basics you can
    pick up.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以访问Arduino IDE支持的许多板子的[源代码](https://oreil.ly/ekC2v)。各种ArduinoCore软件包涵盖了我们在[“Arduino环境”](ch09.xhtml#smallerC-CHP-9-SECT-1)中讨论的涉及C和C++内容的内容。确实，这将是密集的阅读，但你可能会惊讶地发现你可以学到多少基础知识。
- en: Other Microcontrollers
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他单片机
- en: Of course, Arduino isn’t the only microcontroller game in town. Mitchel Davis
    has a really [enjoyable series](https://oreil.ly/iN1Fj) on YouTube documenting
    his journey from programming on Arduino to more limited controllers like the STM8\.
    His examples are often in C, and you can see some of the more arcane topics we
    covered like bit-wise operators on full display.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Arduino并不是唯一的单片机游戏。Mitchel Davis在YouTube上有一个非常[有趣的系列](https://oreil.ly/iN1Fj)，记录了他从Arduino编程到像STM8这样的更受限制的控制器的旅程。他的示例通常是用C语言编写的，你可以看到我们讨论过的像位操作符这样更为难懂的主题。
- en: Going the other direction toward more powerful controllers, the [Raspberry Pi](https://raspberrypi.org)
    platform deserves a mention as well. These tiny computers are full-fledged desktop
    systems capable of running a complete Linux distribution—including running all
    of the developer tools like *gcc*. What’s more, Pis come with the same kinds of
    GPIO (general purpose I/O) connections as the microcontrollers we’ve worked with
    in this book. You can use the same types of sensors and outputs and write C programs
    to drive them. And you get to compile those programs right on the hardware where
    the peripherals are attached! You can take some of the really clever projects,
    such as the [MagicMirror](https://oreil.ly/p4emq), and add motion detectors so
    the mirror lights up only when someone is nearby to make use of it, making it
    even more magical.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 向更强大的控制器方向发展，Raspberry Pi平台也值得一提。这些小型计算机是完整的桌面系统，能够运行完整的Linux发行版，包括运行所有的开发者工具，如*gcc*。更重要的是，Pi具有与我们在本书中使用的微控制器相同类型的通用I/O连接（GPIO）。你可以使用相同类型的传感器和输出，并编写C程序来驱动它们。而且你可以直接在连接外设的硬件上编译这些程序！你可以实现一些非常聪明的项目，比如[魔镜](https://oreil.ly/p4emq)，并添加运动检测器，这样只有有人靠近时镜子才会点亮，使其变得更加神奇。
- en: If nothing else, I hope this book has given you the confidence to try tackling
    these types of projects. It’s a gratifying world that lends itself to mastery.
    Unlike enterprise engineering projects that literally span the globe, you can
    concentrate on really learning the details of something like the Metro Mini controller
    from so many of our examples. You don’t need eight different toolchains to get
    that LED blinking. You don’t need a dozen programmers to debug a photoresistor
    night-light. As one of the reviewers for this book, Alex Faber, put it, there’s
    no cruft to get in the way of the craft. I couldn’t agree more.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有别的，我希望这本书能让你有信心去尝试处理这些类型的项目。这是一个令人满足的世界，适合精通自己的技能。与遍布全球的企业工程项目不同，你可以专注于从我们众多的示例中真正学习诸如
    Metro Mini 控制器之类的细节。你不需要八种不同的工具链来让 LED 闪烁。你也不需要十几名程序员来调试光敏电阻夜灯。正如本书的一位评论者 Alex
    Faber 所说，没有多余的东西妨碍你的技艺。我完全同意他的观点。
- en: Industry C/C++
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工业中的C/C++
- en: 'You also aren’t limited to tinkering with C at home. Arthur C. Clarke’s many
    futures (*2001: A Space Odyssey*, *2010: Odyssey Two*) are now our past, but computers
    and artificial intelligence figure quite prominently in our present. If you are
    interested in pursuing C programming as a career, search any tech job site and
    you will find hundreds of jobs for C programmers from entry level positions to
    senior architects. You can intern with a Linux kernel group or help program embedded
    controllers. You can get a job working on tiny toy drones or program sensors that
    keep the world’s largest factories running.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你也不仅仅在家里摆弄C语言。亚瑟·C·克拉克的许多未来（《2001：太空奥德赛》，《2010：奥德赛二》）现在已经成为我们的过去，但计算机和人工智能在我们的现实中占据了重要位置。如果你有兴趣将C编程作为职业发展，搜索任何技术职位网站，你会发现从初级职位到资深架构师的数百个C程序员职位。你可以在Linux内核组实习，或者帮助程序嵌入式控制器。你可以在制造全球最大工厂的传感器程序中找到一份工作。
- en: Legacy code maintenance still requires good C programmers and pays well enough
    for said programmers to build a nice financial legacy for their progeny. Gaming
    systems need really, *really* fast code for both the game engines and the consoles
    they run on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 维护遗留代码仍然需要优秀的C程序员，并且这些程序员能够通过这项工作为他们的后代创造出丰厚的财富。游戏系统需要非常快速的代码，无论是游戏引擎还是运行在上面的主机。
- en: Supercomputers and microcontrollers both make use of C in a variety of environments.
    While it might be more obvious that microcontrollers need efficient code, massive
    supercomputers want every possible cycle of CPU (or, these days, GPU) time to
    go toward completing their calculations. C excels at providing that level of control,
    and companies know they need programmers who excel at making their expensive machines
    go fast. Just about any field you can think of these days is computerized, and
    anywhere they are pushing the limits of hardware (the tiniest, the deepest, the
    coldest, the fastest, etc.), you can find C programmers helping push those boundaries.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 超级计算机和微控制器在各种环境中都使用C语言。虽然微控制器需要高效的代码更加明显，但大型超级计算机希望每一个CPU（或者现在的GPU）的周期都能用来完成它们的计算任务。C语言在提供这种级别的控制方面表现突出，公司知道他们需要擅长让昂贵的机器快速运行的程序员。如今几乎所有领域都是计算机化的，无论是在推动硬件极限的领域（最小的、最深的、最冷的、最快的等），你都可以找到C程序员帮助推动这些界限。
- en: Back to the Future
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到未来
- en: Many languages have cropped up since C was first developed in the 1970s. Many
    more languages will undoubtedly appear in the years and decades to come. C remains
    so relevant precisely because of that extra control and speed it provides. Many
    more “advanced” languages like Java retain the ability to load native libraries
    written in C with the same kinds of header files we wrote for Arduino. Go can
    also call C functions. Working on embedded systems with Rust, but that one component
    only has C support? Rust can pull in C as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 自从上世纪70年代C语言首次开发以来，许多语言已经出现。未来的年代必然会出现更多的语言。C语言之所以依然重要，正是因为它提供了额外的控制和速度。像Java这样的“先进”语言也能够加载像我们为Arduino编写的相同类型的C编写的本地库。Go语言也可以调用C函数。在使用Rust处理嵌入式系统时，如果只有一个组件支持C，Rust也可以引入C。
- en: Just about everywhere you go in the computer programming world these days, you
    will find C. From its ubiquitous control statements to integration via native
    libraries, knowing C connects you to so much more of this world than you probably
    imagined. All I can say in closing is that I hope you keep imagining. Imagine
    new projects. Imagine new libraries. And then get that imagination running on
    hardware. C is a great tool for reifying those digital dreams. After working through
    this book, I hope you feel confident using it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当今计算机编程领域无处不在的C语言，从其无处不在的控制语句到通过本地库的集成，了解C语言将使您与这个世界的更多内容联系起来，这可能超出了您的想象。在结束时，我只能说希望您继续想象。想象新的项目。想象新的库。然后将那种想象力应用到硬件上。C语言是实现这些数字梦想的强大工具。希望通过这本书的学习，您能自信地使用它。
- en: ^([1](ch12.xhtml#idm45018711193992-marker)) Again from Adafruit, I used the
    [Gemma M0](https://oreil.ly/ZQ5JB) and carved up one of their [144 LED/meter](https://oreil.ly/HlJGk)
    RGBW strips to sew the hourglass onto a shirt. I powered the whole thing with
    a [USB battery pack](https://oreil.ly/2fpE0) and barely dented the charge after
    more than four hours of continuous operation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch12.xhtml#idm45018711193992-marker)) 再次来自Adafruit，我使用了[Gemma M0](https://oreil.ly/ZQ5JB)并切割了他们的[每米144个LED](https://oreil.ly/HlJGk)
    RGBW灯条之一，将沙漏缝在衬衫上。我用[USB电池包](https://oreil.ly/2fpE0)为整个装置供电，在连续运行四个多小时后，电量几乎没怎么用。

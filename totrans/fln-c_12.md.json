["```cpp\n#ifndef LOGGER_H\n#define LOGGER_H\nvoid logging(const char* text);\n#endif\n```", "```cpp\nlogging(\"Some text to log\");\n```", "```cpp\nvoid logging(const char* text)\n{\n  time_t mytime = time(NULL);\n  printf(\"%s %s\\n\", ctime(&mytime), text);\n}\n```", "```cpp\n/* Prints the current timestamp followed by the provided string to stdout.\n The string must be valid until this function returns. */\nvoid logging(const char* text);\n```", "```cpp\n/* Prints the current timestamp followed by the provided string to stdout.\n The string must be valid until this function returns. The provided module\n identifies the software-module that calles this function. */\nvoid logging(const char* module, const char* text);\n\n/* Enables printing output for the provided module. */\nbool enableModule(const char* module);\n```", "```cpp\nlogging(\"MY-SOFTWARE-MODULE\", \"Some text to log\");\n```", "```cpp\n#define MODULE_SIZE 20\n#define LIST_SIZE 10\ntypedef struct\n{\n  char module[MODULE_SIZE];\n}LIST;\nstatic LIST list[LIST_SIZE];\n```", "```cpp\nbool enableModule(const char* module)\n{\n  for(int i=0; i<LIST_SIZE; i++)\n  {\n    if(strcmp(list[i].module, \"\") == 0)\n    {\n      strcpy(list[i].module, module);\n      return true;\n    }\n    if(strcmp(list[i].module, module) == 0)\n    {\n      return false;\n    }\n  }\n  return false;\n}\n```", "```cpp\n/* Enables printing output for the provided module. Returns true on success\n and false on error (no more modules can be enabled or module was already\n enabled). */\nbool enableModule(const char* module);\n```", "```cpp\nvoid logging(const char* module, const char* text)\n{\n  time_t mytime = time(NULL);\n  if(isInList(module))\n  {\n    printf(\"%s %s\\n\", ctime(&mytime), text);\n  }\n}\n```", "```cpp\nbool isInList(const char* module)\n{\n  for(int i=0; i<LIST_SIZE; i++)\n  {\n    if(strcmp(list[i].module, module) == 0)\n    {\n      return true;\n    }\n  }\n  return false;\n}\n```", "```cpp\n/* All future log messages will be logged to stdout */\nvoid logToStdout();\n\n/* All future log messages will be logged to a file */\nvoid logToFile();\n```", "```cpp\ntypedef void (*logDestination)(const char*);\nstatic logDestination fp = stdoutLogging;\n\nvoid stdoutLogging(const char* buffer)\n{\n  printf(\"%s\", buffer);\n}\n\nvoid fileLogging(const char* buffer)\n{\n  /* not yet implemented */\n}\n\nvoid logToStdout()\n{\n  fp = stdoutLogging;\n}\n\nvoid logToFile()\n{\n  fp = fileLogging;\n}\n\n#define BUFFER_SIZE 100\nvoid logging(const char* module, const char* text)\n{\n  char buffer[BUFFER_SIZE];\n  time_t mytime = time(NULL);\n  if(isInList(module))\n  {\n    sprintf(buffer, \"%s %s\\n\", ctime(&mytime), text);\n    fp(buffer);\n  }\n}\n```", "```cpp\nvoid fileLogging(const char* buffer)\n{\n  static int fd = 0; ![1](assets/1.png)\n  if(fd == 0)\n  {\n    fd = open(\"log.txt\", O_RDWR | O_CREAT, 0666);\n  }\n  write(fd, buffer, strlen(buffer));\n}\n```", "```cpp\nvoid fileLogging(const char* buffer)\n{\n  void* fileDescriptor = initiallyOpenLogFile();\n  writeLogFile(fileDescriptor, buffer);\n}\n\n/* Opens the logfile at the first call.\n Works on Linux and on Windows systems */\nvoid* initiallyOpenLogFile()\n{\n  ...\n}\n\n/* Writes the provided buffer to the logfile.\n Works on Linux and on Windows systems */\nvoid writeLogFile(void* fileDescriptor, const char* buffer)\n{\n  ...\n}\n```", "```cpp\nvoid* initiallyOpenLogFile()\n{\n#ifdef __unix__\n  static int fd = 0;\n  if(fd == 0)\n  {\n    fd = open(\"log.txt\", O_RDWR | O_CREAT, 0666);\n  }\n  return fd;\n#elif defined _WIN32\n  static HANDLE hFile = NULL;\n  if(hFile == NULL)\n  {\n    hFile = CreateFile(\"log.txt\", GENERIC_WRITE, 0, NULL,\n                       CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);\n  }\n  return hFile;\n#endif\n}\n\nvoid writeLogFile(void* fileDescriptor, const char* buffer)\n{\n#ifdef __unix__\n  write((int)fileDescriptor, buffer, strlen(buffer));\n#elif defined _WIN32\n  WriteFile((HANDLE)fileDescriptor, buffer, strlen(buffer), NULL, NULL);\n#endif\n}\n```", "```cpp\n#ifdef __unix__\nvoid* initiallyOpenLogFile()\n{\n  static int fd = 0;\n  if(fd == 0)\n  {\n    fd = open(\"log.txt\", O_RDWR | O_CREAT, 0666);\n  }\n  return fd;\n}\n\nvoid writeLogFile(void* fileDescriptor, const char* buffer)\n{\n  write((int)fileDescriptor, buffer, strlen(buffer));\n}\n#endif\n```", "```cpp\n#ifdef _WIN32\nvoid* initiallyOpenLogFile()\n{\n  static HANDLE hFile = NULL;\n  if(hFile == NULL)\n  {\n    hFile = CreateFile(\"log.txt\", GENERIC_WRITE, 0, NULL,\n                       CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);\n  }\n  return hFile;\n}\n\nvoid writeLogFile(void* fileDescriptor, const char* buffer)\n{\n  WriteFile((HANDLE)fileDescriptor, buffer, strlen(buffer), NULL, NULL);\n}\n#endif\n```", "```cpp\nenableModule(\"MYMODULE\");\nlogging(\"MYMODULE\", \"Log to stdout\");\nlogToFile();\nlogging(\"MYMODULE\", \"Log to file\");\nlogging(\"MYMODULE\", \"Log to file some more\");\n```"]
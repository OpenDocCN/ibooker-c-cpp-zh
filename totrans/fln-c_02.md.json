["```cpp\nint parseFile(char* file_name)\n{\n  int return_value = ERROR;\n  FILE* file_pointer = 0;\n  char* buffer = 0;\n\n  if(file_name!=NULL)\n  {\n    if(file_pointer=fopen(file_name, \"r\"))\n    {\n      if(buffer=malloc(BUFFER_SIZE))\n      {\n        /* parse file content*/\n        return_value = NO_KEYWORD_FOUND;\n        while(fgets(buffer, BUFFER_SIZE, file_pointer)!=NULL)\n        {\n          if(strcmp(\"KEYWORD_ONE\\n\", buffer)==0)\n          {\n            return_value = KEYWORD_ONE_FOUND_FIRST;\n            break;\n          }\n          if(strcmp(\"KEYWORD_TWO\\n\", buffer)==0)\n          {\n            return_value = KEYWORD_TWO_FOUND_FIRST;\n            break;\n          }\n        }\n        free(buffer);\n      }\n      fclose(file_pointer);\n    }\n  }\n  return return_value;\n}\n```", "```cpp\nvoid someFunction()\n{\n  char* buffer = malloc(LARGE_SIZE);\n  if(buffer)\n  {\n    mainFunctionality(buffer);\n  }\n  free(buffer);\n}\n\nvoid mainFunctionality()\n{\n  // implementation goes here\n}\n```", "```cpp\nint searchFileForKeywords(char* buffer, FILE* file_pointer)\n{\n  while(fgets(buffer, BUFFER_SIZE, file_pointer)!=NULL)\n  {\n    if(strcmp(\"KEYWORD_ONE\\n\", buffer)==0)\n    {\n      return KEYWORD_ONE_FOUND_FIRST;\n    }\n    if(strcmp(\"KEYWORD_TWO\\n\", buffer)==0)\n    {\n      return KEYWORD_TWO_FOUND_FIRST;\n    }\n  }\n  return NO_KEYWORD_FOUND;\n}\n\nint parseFile(char* file_name)\n{\n  int return_value = ERROR;\n  FILE* file_pointer = 0;\n  char* buffer = 0;\n\n  if(file_name!=NULL)\n  {\n    if(file_pointer=fopen(file_name, \"r\"))\n    {\n      if(buffer=malloc(BUFFER_SIZE))\n      {\n        return_value = searchFileForKeywords(buffer, file_pointer);\n        free(buffer);\n      }\n      fclose(file_pointer);\n    }\n  }\n  return return_value;\n}\n```", "```cpp\n/* This function operates on the 'user_input', which must not be NULL */\nvoid someFunction(char* user_input);\n```", "```cpp\nvoid someFunction(char* user_input)\n{\n  if(user_input == NULL)\n  {\n    return;\n  }\n  operateOnData(user_input);\n}\n```", "```cpp\nint parseFile(char* file_name)\n{\n  int return_value = ERROR;\n  FILE* file_pointer = 0;\n  char* buffer = 0;\n\n  if(file_name==NULL) ![1](assets/1.png)\n  {\n    return ERROR;\n  }\n  if(file_pointer=fopen(file_name, \"r\"))\n  {\n    if(buffer=malloc(BUFFER_SIZE))\n    {\n      return_value = searchFileForKeywords(buffer, file_pointer);\n      free(buffer);\n    }\n    fclose(file_pointer);\n  }\n  return return_value;\n}\n```", "```cpp\nvoid someFunction()\n{\n  assert(checkPreconditions() && \"Preconditions are not met\");\n  mainFunctionality();\n}\n```", "```cpp\nint parseFile(char* file_name)\n{\n  int return_value = ERROR;\n  FILE* file_pointer = 0;\n  char* buffer = 0;\n\n  assert(file_name!=NULL && \"Invalid filename\");\n  if(file_pointer=fopen(file_name, \"r\"))\n  {\n    if(buffer=malloc(BUFFER_SIZE))\n    {\n      return_value = searchFileForKeywords(buffer, file_pointer);\n      free(buffer);\n    }\n    fclose(file_pointer);\n  }\n  return return_value;\n}\n```", "```cpp\nvoid someFunction()\n{\n  if(!allocateResource1())\n  {\n    goto cleanup1;\n  }\n  if(!allocateResource2())\n  {\n    goto cleanup2;\n  }\n  mainFunctionality();\ncleanup2:\n  cleanupResource2();\ncleanup1:\n  cleanupResource1();\n}\n```", "```cpp\nint parseFile(char* file_name)\n{\n  int return_value = ERROR;\n  FILE* file_pointer = 0;\n  char* buffer = 0;\n\n  assert(file_name!=NULL && \"Invalid filename\");\n  if(!(file_pointer=fopen(file_name, \"r\")))\n  {\n    goto error_fileopen;\n  }\n  if(!(buffer=malloc(BUFFER_SIZE)))\n  {\n    goto error_malloc;\n  }\n  return_value = searchFileForKeywords(buffer, file_pointer);\n  free(buffer);\nerror_malloc:\n  fclose(file_pointer);\nerror_fileopen:\n  return return_value;\n}\n```", "```cpp\nvoid someFunction()\n{\n  if((r1=allocateResource1()) && (r2=allocateResource2()))\n  {\n    mainFunctionality();\n  }\n  if(r1) ![1](assets/1.png)\n  {\n    cleanupResource1();\n  }\n  if(r2) ![1](assets/1.png)\n  {\n    cleanupResource2();\n  }\n}\n```", "```cpp\nint parseFile(char* file_name)\n{\n  int return_value = ERROR;\n  FILE* file_pointer = 0;\n  char* buffer = 0;\n\n  assert(file_name!=NULL && \"Invalid filename\");\n  if((file_pointer=fopen(file_name, \"r\")) &&\n     (buffer=malloc(BUFFER_SIZE)))\n  {\n    return_value = searchFileForKeywords(buffer, file_pointer);\n  }\n  if(file_pointer)\n  {\n    fclose(file_pointer);\n  }\n  if(buffer)\n  {\n    free(buffer);\n  }\n  return return_value;\n}\n```", "```cpp\nvoid someFunction()\n{\n  allocateResources();\n  mainFunctionality();\n  cleanupResources();\n}\n```", "```cpp\ntypedef struct\n{\n  FILE* file_pointer;\n  char* buffer;\n}FileParser;\n\nint parseFile(char* file_name)\n{\n  int return_value;\n  FileParser* parser = createParser(file_name);\n  return_value = searchFileForKeywords(parser);\n  cleanupParser(parser);\n  return return_value;\n}\n\nint searchFileForKeywords(FileParser* parser)\n{\n  if(parser == NULL)\n  {\n    return ERROR;\n  }\n  while(fgets(parser->buffer, BUFFER_SIZE, parser->file_pointer)!=NULL)\n  {\n    if(strcmp(\"KEYWORD_ONE\\n\", parser->buffer)==0)\n    {\n      return KEYWORD_ONE_FOUND_FIRST;\n    }\n    if(strcmp(\"KEYWORD_TWO\\n\", parser->buffer)==0)\n    {\n      return KEYWORD_TWO_FOUND_FIRST;\n    }\n  }\n  return NO_KEYWORD_FOUND;\n}\n\nFileParser* createParser(char* file_name)\n{\n  assert(file_name!=NULL && \"Invalid filename\");\n  FileParser* parser = malloc(sizeof(FileParser));\n  if(parser)\n  {\n    parser->file_pointer=fopen(file_name, \"r\");\n    parser->buffer = malloc(BUFFER_SIZE);\n    if(!parser->file_pointer || !parser->buffer)\n    {\n      cleanupParser(parser);\n      return NULL;\n    }\n  }\n  return parser;\n}\n\nvoid cleanupParser(FileParser* parser)\n{\n  if(parser)\n  {\n    if(parser->buffer)\n    {\n      free(parser->buffer);\n    }\n    if(parser->file_pointer)\n    {\n      fclose(parser->file_pointer);\n    }\n    free(parser);\n  }\n}\n```"]
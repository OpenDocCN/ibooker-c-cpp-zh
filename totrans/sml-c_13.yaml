- en: Appendix A. Hardware and Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I try to point out any specific hardware parts or software packages where I
    first use them, but I also want to give you a quick list of the various components
    for easy reference. I wasn’t paid for mentioning any products nor do the various
    owners and manufacturers endorse my book. The glowing opinions I express here
    are entirely my own. :)
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The C examples and Arduino Sketches are all available online at [*https://github.com/l0y/smallerc*](https://github.com/l0y/smallerc).
    Most examples have links to their particular files, but you can also download
    the archive using the drop-down shown in [Figure A-1](#smallerc-APP-A-FIG-github-archive-dropdown).
  prefs: []
  type: TYPE_NORMAL
- en: For the C examples, there’s not really anything else to do. You can open any
    of the examples in your editor of choice. You can make and save your changes,
    then compile the examples right there in the same folder.
  prefs: []
  type: TYPE_NORMAL
- en: For the various sketches, you may want to drag each sketch folder over to your
    Arduino Sketchbook location as you work on it. (This location is set in the Arduino
    IDE preferences, as shown in [Figure 11-9](ch11.xhtml#smallerc-CHP-11-FIG-ide-sketch-location)
    from [“The libraries folder”](ch11.xhtml#smallerc-CHP-11-SECT-3.4.1).) This will
    make sure you have access to any libraries you may have installed. It also means
    you can look in the “usual spot” for these projects after you’re done with the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: '![smac aa01](Images/smac_aa01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-1\. Downloading the examples archive from GitHub
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Getting the Hardware: Adafruit'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of the physical gear I use throughout the examples in this book comes
    from Adafruit. They have an amazing selection of controllers and components, along
    with some of the most fun, complete, nerdy tutorials you can find on the web.
    I do most of my shopping directly at [their site](https://adafruit.com), but you
    can also find many of their parts through [Amazon](https://oreil.ly/CyB1X) and
    [Digi-Key](https://digikey.com). [Table A-1](#smallerc-APP-B-TAB-microcontrollers)
    lists the microcontrollers I used in the many Arduino projects. [Table A-2](#smallerc-APP-B-TAB-peripherals)
    lists the peripherals and components I used by chapter. Where I used a component
    in multiple projects, I went ahead and listed it in every chapter it appeared.
  prefs: []
  type: TYPE_NORMAL
- en: Table A-1\. Microcontrollers and prototyping
  prefs: []
  type: TYPE_NORMAL
- en: '| Microcontroller | Specs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Metro Mini](https://oreil.ly/KxFf0) (2x) | ATmega328, 32KB flash, 2KB SRAM
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Trinket M0](https://oreil.ly/R2fui) | 32-bit ATSAMD21E18, 256KB flash, 32KB
    SRAM |'
  prefs: []
  type: TYPE_TB
- en: '| [HUZZAH32 Feather](https://oreil.ly/p5Ldy) | Tensilica LX6, WROOM32, HT40
    WiFi, 4MB flash, 520KB SRAM, Bluetooth |'
  prefs: []
  type: TYPE_TB
- en: '| Prototyping Gear |'
  prefs: []
  type: TYPE_TB
- en: '| [Full-size Breadboard](https://oreil.ly/sZo2h) | Standard breadboard with
    power rails |'
  prefs: []
  type: TYPE_TB
- en: '| [Half-size Breadboard](https://oreil.ly/bfpYJ) | Compact breadboard with
    power rails |'
  prefs: []
  type: TYPE_TB
- en: '| [Connector Wires](https://oreil.ly/RoHW1) | Bundle with various lengths and
    molex tips |'
  prefs: []
  type: TYPE_TB
- en: Table A-2\. Peripherals and components
  prefs: []
  type: TYPE_NORMAL
- en: '| Component | Specs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 8](ch08.xhtml#smallerc-CHP-8) |'
  prefs: []
  type: TYPE_TB
- en: '| [100Ω Resistor](https://oreil.ly/YOgc7) | Carbon fiber through-hole |'
  prefs: []
  type: TYPE_TB
- en: '| [470Ω Resistor](https://oreil.ly/wwVrn) | Carbon fiber through-hole |'
  prefs: []
  type: TYPE_TB
- en: '| [Blue LEDs](https://oreil.ly/xJqOL) | 3mm diameter, ~3.0V Forward Voltage
    |'
  prefs: []
  type: TYPE_TB
- en: '| [NeoPixel Flora](https://oreil.ly/dyCpE) | Individual RGB NeoPixel LED |'
  prefs: []
  type: TYPE_TB
- en: '| [NeoPixel Stick](https://oreil.ly/8zpaZ) | 8 RGB NeoPixel LEDs, stick mounted
    |'
  prefs: []
  type: TYPE_TB
- en: '| [NeoPixel Ring](https://oreil.ly/Mwoph) | 24 RGB NeoPixel LEDs, ring mounted
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 9](ch09.xhtml#smallerc-CHP-9) |'
  prefs: []
  type: TYPE_TB
- en: '| [RGB LED](https://oreil.ly/e0TBv) | 5mm, common cathode |'
  prefs: []
  type: TYPE_TB
- en: '| [470Ω Resistor](https://oreil.ly/8jyjo) | Carbon fiber through-hole |'
  prefs: []
  type: TYPE_TB
- en: '| [TMP36 Temperature Sensor](https://oreil.ly/JQFud) | Analog, range -50 to
    125 C |'
  prefs: []
  type: TYPE_TB
- en: '| [Four-Digit Display](https://oreil.ly/RO5P5) | Red, MAX7219 driver (alternative
    to VMA425) |'
  prefs: []
  type: TYPE_TB
- en: '| [Tactile Button](http://adafru.it/367) | Simple push-button |'
  prefs: []
  type: TYPE_TB
- en: '| [NeoPixel Ring](https://oreil.ly/8GOWh) | 24 RGB NeoPixel LEDs, ring mounted
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 10](ch10.xhtml#smallerc-CHP-10) |'
  prefs: []
  type: TYPE_TB
- en: '| [NeoPixel Stick](https://oreil.ly/mPpVW) | 8 RGB NeoPixel LEDs, stick mounted
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 11](ch11.xhtml#smallerc-CHP-11) |'
  prefs: []
  type: TYPE_TB
- en: '| [RFM69HCW Transceiver](https://adafru.it/3070) (2x) | 900MHz (Americas) |'
  prefs: []
  type: TYPE_TB
- en: '| [Navigation Switch](https://adafru.it/504) | Through-hole, 5-way |'
  prefs: []
  type: TYPE_TB
- en: '| [Rubber Nubbin Cap](https://adafru.it/4697) | Fits navigation joystick |'
  prefs: []
  type: TYPE_TB
- en: '| [TT Motor Wheel](https://adafru.it/3766) (2x) | Orange spokes, clear tire
    |'
  prefs: []
  type: TYPE_TB
- en: '| [TT Motor Gearbox](https://adafru.it/3777) (2x) | 200 RPM, 3 - 6VDC |'
  prefs: []
  type: TYPE_TB
- en: '| [Motor Driver Breakout](https://adafru.it/3297) | DRV8833 chip |'
  prefs: []
  type: TYPE_TB
- en: '| [Chassis for TT Motors](https://adafru.it/3796) | Aluminum, purple |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 12](ch12.xhtml#smallerc-CHP-12) |'
  prefs: []
  type: TYPE_TB
- en: '| [OLED Display](https://adafru.it/4440) | 0.91”, 128x32 pixel, I2C |'
  prefs: []
  type: TYPE_TB
- en: '| [TMP36 Temperature Sensor](https://adafru.it/165) | Analog, range -50 to
    125 C |'
  prefs: []
  type: TYPE_TB
- en: 'In general, I tried to stick with breadboard projects that are easy to set
    up and alter. If you build something stable and want to reflect that stability
    by getting off the breadboard, I highly recommend the [Adafruit Guide to Excellent
    Soldering](https://oreil.ly/vytmN). They give you some great advice on both the
    hardware and techniques that pro hobbyists use to create more permanent projects.
    I will add one bit of emphasis to their otherwise fantastic guide: in the section
    on soldering irons, the “Best Irons” really are the best. They are definitely
    more expensive, so won’t be for everyone, but if you can afford it, irons like
    the [Hakko FX-888D](https://https://adafru.it/1204) elevate the tedium of soldering
    header pins to a meditative art.'
  prefs: []
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I do my non-Arduino coding with [Visual Studio Code](https://oreil.ly/C6v3D)
    from Microsoft. And while it is written by Microsoft, VS Code also works on Linux
    and macOS. It’s highly configurable and has a vibrant extension ecosystem for
    just about every possible programming language and web development framework.
    The “C/C++” extension is great for working with C, if nothing else.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, I relied on the [Arduino IDE](https://oreil.ly/7vXun)
    for compiling and uploading the microcontroller projects. The Arduino IDE is cross-platform
    and has excellent support for a wide range of microcontrollers from many different
    vendors.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino site also has a useful [Language Reference](https://oreil.ly/VH8RZ)
    and several [tutorials](https://oreil.ly/OWYJy) covering everything from simple
    “getting started” topics to more advanced hacking techniques for really diving
    into the Arduino platform.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'I should point out that for folks who really enjoy the VS Code environment,
    there is growing enthusiasm for [PlatformIO](https://platformio.org). Per their
    About page: “PlatformIO is a cross-platform, cross-architecture, multiple framework,
    professional tool for embedded systems engineers and for software developers who
    write applications for embedded products.”'
  prefs: []
  type: TYPE_NORMAL
- en: It has a standalone option, but it also has a mature VS Code extension. You
    can find out more details on their [VS Code Integration](https://oreil.ly/3ZH3G)
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Fritzing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed the cute circuitry-as-font word “fritzing” in our wiring
    diagrams. If you build any projects that you decide to share with others, you
    can create these types of diagrams yourself. The good folks at [Fritzing](https://fritzing.org)
    created the software I used. The design application is cross-platform, and many
    third parties have created a truly remarkable number of visually appealing contributions
    to the libraries of controllers and components. It’s also delightfully intuitive,
    especially if you’ve had any experience with other design and layout tools, such
    as [OmniGraffle](https://oreil.ly/zODll) or [Inkscape](https://inkscape.org).
    They do request a (very!) modest fee, and I find it worth every penny if you can
    afford it.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a wealth of fritzing-friendly components online as well. Their
    forum contains some great, high-quality contributions such as the 4-digit, 7-segment
    display used in [Figure 9-5](ch09.xhtml#smallerc-CHP-9-FIG-tmp36-led-wiring),
    contributed by Desnot4000. You can also import SVG files to create custom components
    if needed.
  prefs: []
  type: TYPE_NORMAL
- en: If you really get going with your own electronics projects, Fritzing’s software
    can also be used to produce custom circuit boards. Your hobby has never looked
    so professional! Dedicated to making hardware open and accessible to more and
    more folks, I could not be more impressed with this group and their wider user
    community.
  prefs: []
  type: TYPE_NORMAL
- en: GNU Compiler Collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Last but most definitely not least, I used the GNU C compiler (as does the Arduino
    IDE) from the impossibly useful [GNU Compiler Collection](https://gcc.gnu.org).
    As you probably noticed in [“Tools Required”](ch01.xhtml#smallerc-CHP-1-SECT-2.1),
    it can take a little effort to get these tools installed on some platforms, but
    the breadth and quality of these compilers is unparalleled. Combined with their
    open source ethos, it really is hard to beat GNU software anywhere it’s available.
  prefs: []
  type: TYPE_NORMAL

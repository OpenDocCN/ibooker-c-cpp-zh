["```cpp\nvoid ethShow()\n{\n  printf(\"%i packets received\\n\", driver.internal_data.rec);\n  printf(\"%i packets sent\\n\", driver.internal_data.snd);\n}\n```", "```cpp\nint my_data = getData();\n/* use my_data */\n```", "```cpp\nint getData()\n{\n  int requested_data;\n  /* .... */\n  return requested_data;\n}\n```", "```cpp\n/* Returns the number of total received packets*/\nint ethernetDriverGetTotalReceivedPackets();\n\n/* Returns the number of total sent packets*/\nint ethernetDriverGetTotalSentPackets();\n```", "```cpp\nvoid ethShow()\n{\n  int received_packets = ethernetDriverGetTotalReceivedPackets();\n  int sent_packets = ethernetDriverGetTotalSentPackets();\n  printf(\"%i packets received\\n\", received_packets);\n  printf(\"%i packets sent\\n\", sent_packets);\n}\n```", "```cpp\nvoid ethShow()\n{\n  int received_packets = ethernetDriverGetTotalReceivedPackets();\n  int total_sent_packets = ethernetDriverGetTotalSentPackets();\n  int successfully_sent_packets = ethernetDriverGetSuccesscullySentPackets();\n  int failed_sent_packets = ethernetDriverGetFailedPackets();\n  printf(\"%i packets received\\n\", received_packets);\n  printf(\"%i packets sent\\n\", total_sent_packets);\n  printf(\"%i packets successfully sent\\n\", successfully_sent_packets);\n  printf(\"%i packets failed to send\\n\", failed_sent_packets);\n}\n```", "```cpp\nint x,y;\ngetData(&x,&y);\n/* use x,y */\n```", "```cpp\nvoid getData(int* x, int* y)\n{\n  *x = 42;\n  *y = 78;\n}\n```", "```cpp\n/* Returns driver status information via out-parameters.\n   total_sent_packets   --> number of packets tried to send (success and fail)\n   successfully_sent_packets --> number of packets successfully sent\n   failed_sent_packets  --> number of packets failed to send */\nvoid ethernetDriverGetStatistics(int* total_sent_packets,\n      int* successfully_sent_packets, int* failed_sent_packets); ![1](assets/1.png)\n```", "```cpp\nvoid ethShow()\n{\n  int total_sent_packets, successfully_sent_packets, failed_sent_packets;\n  ethernetDriverGetStatistics(&total_sent_packets, &successfully_sent_packets,\n                              &failed_sent_packets);\n  printf(\"%i packets sent\\n\", total_sent_packets);\n  printf(\"%i packets successfully sent\\n\", successfully_sent_packets);\n  printf(\"%i packets failed to send\\n\", failed_sent_packets);\n\n  int received_packets = ethernetDriverGetTotalReceivedPackets();\n  printf(\"%i packets received\\n\", received_packets);\n}\n```", "```cpp\nstruct AggregateInstance my_instance;\nmy_instance = getData();\n/* use my_instance.x\n use my_instance.y, ... */\n```", "```cpp\nstruct AggregateInstance\n{\n  int x;\n  int y;\n};\n\nstruct AggregateInstance getData()\n{\n  struct AggregateInstance inst;\n  /* fill inst.x and inst.y */\n  return inst; ![1](assets/1.png)\n}\n```", "```cpp\nstruct EthernetDriverStat{\n  int received_packets;         /* Number of received packets */\n  int total_sent_packets;       /* Number of sent packets (success and fail)*/\n  int successfully_sent_packets;/* Number of successfully sent packets */\n  int failed_sent_packets;      /* Number of packets failed to send */\n};\n\n/* Returns statistics information of the Ethernet driver */\nstruct EthernetDriverStat ethernetDriverGetStatistics();\n```", "```cpp\nvoid ethShow()\n{\n  struct EthernetDriverStat eth_stat = ethernetDriverGetStatistics();\n  printf(\"%i packets received\\n\", eth_stat.received_packets);\n  printf(\"%i packets sent\\n\", eth_stat.total_sent_packets);\n  printf(\"%i packets successfully sent\\n\",eth_stat.successfully_sent_packets);\n  printf(\"%i packets failed to send\\n\", eth_stat.failed_sent_packets);\n}\n```", "```cpp\nconst struct ImmutableInstance* my_instance;\nmy_instance = getData(); ![1](assets/1.png)\n/* use my_instance->x,\n   use my_instance->y, ... */\n```", "```cpp\nstruct ImmutableInstance\n{\n  int x;\n  int y;\n};\n```", "```cpp\nstatic struct ImmutableInstance inst = {12, 42};\nconst struct ImmutableInstance* getData()\n{\n   return &inst;\n}\n```", "```cpp\nstruct EthernetDriverInfo{\n  char name[64];\n  char description[1024];\n};\n\n/* Returns the driver name and description */\nconst struct EthernetDriverInfo* ethernetDriverGetInfo();\n```", "```cpp\nvoid ethShow()\n{\n  struct EthernetDriverStat eth_stat = ethernetDriverGetStatistics();\n  printf(\"%i packets received\\n\", eth_stat.received_packets);\n  printf(\"%i packets sent\\n\", eth_stat.total_sent_packets);\n  printf(\"%i packets successfully sent\\n\",eth_stat.successfully_sent_packets);\n  printf(\"%i packets failed to send\\n\", eth_stat.failed_sent_packets);\n\n  const struct EthernetDriverInfo* eth_info = ethernetDriverGetInfo();\n  printf(\"Driver name: %s\\n\", eth_info->name);\n  printf(\"Driver description: %s\\n\", eth_info->description);\n}\n```", "```cpp\nstruct Buffer buffer;\n\ngetData(&buffer);\n/* use buffer.data */\n```", "```cpp\n#define BUFFER_SIZE 256\nstruct Buffer\n{\n  char data[BUFFER_SIZE];\n};\n\nvoid getData(struct Buffer* buffer);\n```", "```cpp\nvoid getData(struct Buffer* buffer)\n{\n  memcpy(buffer->data, some_data, BUFFER_SIZE);\n}\n```", "```cpp\nstruct IpAddress{\n  char address[16];\n  char subnet[16];\n};\n\n/* Stores the IP information into 'ip', which has to be provided\n by the caller*/\nvoid ethernetDriverGetIp(struct IpAddress* ip);\n```", "```cpp\nvoid ethShow()\n{\n  struct EthernetDriverStat eth_stat = ethernetDriverGetStatistics();\n  printf(\"%i packets received\\n\", eth_stat.received_packets);\n  printf(\"%i packets sent\\n\", eth_stat.total_sent_packets);\n  printf(\"%i packets successfully sent\\n\",eth_stat.successfully_sent_packets);\n  printf(\"%i packets failed to send\\n\", eth_stat.failed_sent_packets);\n\n  const struct EthernetDriverInfo* eth_info = ethernetDriverGetInfo();\n  printf(\"Driver name: %s\\n\", eth_info->name);\n  printf(\"Driver description: %s\\n\", eth_info->description);\n\n  struct IpAddress ip;\n  ethernetDriverGetIp(&ip);\n  printf(\"IP address: %s\\n\", ip.address);\n}\n```", "```cpp\nchar* buffer;\nint size;\ngetData(&buffer, &size);\n/* use buffer */\nfree(buffer);\n```", "```cpp\nvoid getData(char** buffer, int* size)\n{\n  *size = data_size;\n  *buffer = malloc(data_size);\n  /* write data to buffer */ ![1](assets/1.png)\n}\n```", "```cpp\nstruct Packet\n{\n  char data[1500]; /* maximum 1500 byte per packet */\n  int size;        /* actual size of data in the packet */\n};\n\n/* Returns a pointer to a packet that has to be freed by the caller */\nstruct Packet* ethernetDriverGetPacket();\n```", "```cpp\nvoid ethShow()\n{\n  struct EthernetDriverStat eth_stat = ethernetDriverGetStatistics();\n  printf(\"%i packets received\\n\", eth_stat.received_packets);\n  printf(\"%i packets sent\\n\", eth_stat.total_sent_packets);\n  printf(\"%i packets successfully sent\\n\",eth_stat.successfully_sent_packets);\n  printf(\"%i packets failed to send\\n\", eth_stat.failed_sent_packets);\n\n  const struct EthernetDriverInfo* eth_info = ethernetDriverGetInfo();\n  printf(\"Driver name: %s\\n\", eth_info->name);\n  printf(\"Driver description: %s\\n\", eth_info->description);\n\n  struct IpAddress ip;\n  ethernetDriverGetIp(&ip);\n  printf(\"IP address: %s\\n\", ip.address);\n\n  struct Packet* packet = ethernetDriverGetPacket();\n  printf(\"Packet Dump:\");\n  fwrite(packet->data, 1, packet->size, stdout);\n  free(packet);\n}\n```"]
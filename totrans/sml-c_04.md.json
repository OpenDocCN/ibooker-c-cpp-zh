["```cpp\n#include <stdio.h>\n\nint main() {\n  char name[20];\n\n  printf(\"Enter your name: \");\n  scanf(\"%s\", name);\n  printf(\"Well hello, %s!\\n\", name);\n}\n```", "```cpp\nch04$ ./a.out\nEnter your name: @AdmiralGraceMurrayHopper\nWell hello, @AdmiralGraceMurrayHopper!\n*** stack smashing detected ***: terminated\nAborted (core dumped)\n```", "```cpp\n#include <stdio.h>\n\nint main() {\n  double ledger[100];\n  printf(\"Size of a double: %li\\n\", sizeof (double));\n  printf(\"Size of ledger: %li\\n\", sizeof ledger);\n  printf(\"Calculated ledger capacity: %li\\n\", sizeof ledger / (sizeof (double)));\n}\n```", "```cpp\nch04$ gcc capacity.c\nch04$ ./a.out\nSize of a double: 8\nSize of ledger: 800\nCalculated ledger capacity: 100\n```", "```cpp\nint days_in_month[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\nchar vowels[6] = { 'a', 'e', 'i', 'o', 'u', 'y' };\nfloat readings[7] = { 8.9, 8.6, 8.5, 8.7, 8.9, 8.8, 8.5 };\n```", "```cpp\nint days_in_month[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\nchar vowels[] = { 'a', 'e', 'i', 'o', 'u', 'y' };\nfloat readings[] = { 8.9, 8.6, 8.5, 8.7, 8.9, 8.8, 8.5 };\n```", "```cpp\n// Special initialization of a char array with a string literal\nchar secret[] = \"password1\";\n\n// The printf() format string is usually a string literal\nprintf(\"Hello, world!\\n\");\n\n// And we can print literals, too\nprintf(\"The value stored in %s is '%s'\\n\", \"secret\", secret);\n```", "```cpp\n  printf(\"The second vowel is: %c\\n\", vowels[1]);\n  printf(\"July has %d days.\\n\", days_in_month[6]);\n```", "```cpp\nThe second vowel is: e\nJuly has 31 days.\n```", "```cpp\n  int month = 7;\n  printf(\"July (month %d) has %d days.\", month, days_in_month[month - 1]);\n```", "```cpp\nif (year % 4 == 0) {\n  // Forgive the naive leap year calculation :)\n  days_in_month[1] = 29;\n}\n```", "```cpp\nfloat readings[10];\n// ... interesting stuff goes here to set up the sensor and read it\nreadings[7] = latest_reading;\n```", "```cpp\nfor (int m = 0; m < 12; m++) {\n  // remember the array starts at 0, but humans start at 1\n  printf(\"Days in month %d is %d.\\n\", m + 1, days_in_month[m]);\n}\n```", "```cpp\nDays in month 1 is 31.\nDays in month 2 is 28.\nDays in month 3 is 31.\nDays in month 4 is 30.\nDays in month 5 is 31.\nDays in month 6 is 30.\nDays in month 7 is 31.\nDays in month 8 is 31.\nDays in month 9 is 30.\nDays in month 10 is 31.\nDays in month 11 is 30.\nDays in month 12 is 31.\n```", "```cpp\nfloat readings[] = { 8.9, 8.6, 8.5, 8.7, 8.9, 8.8, 8.5 };\n\n// Use our sizeof trick to get the number of elements\nint count = sizeof readings / sizeof (float);\nfloat total = 0.0;\nfloat average;\nfor (int r = 0; r < count; r++) {\n  total += readings[r];\n}\naverage = total / count;\nprintf(\"The average reading is %0.2f\\n\", average);\n```", "```cpp\n#include <stdio.h>\n\nint main() {\n  char phrase[] = \"Hello, world!\";\n  int i = 0;\n  // keep looping until the end of the string\n  while (phrase[i] != '\\0') {\n    if (phrase[i] == ',') {\n      printf(\"Found a comma at position %d.\\n\", i);\n      break;\n    }\n    // try the next character\n    i++;\n  }\n  if (phrase[i] == '\\0') {\n    // Rats. Made it to the end of the string without a match.\n    printf(\"No comma found in %s\\n\", phrase);\n  }\n}\n```", "```cpp\nchar month_names[][];\n```", "```cpp\nchar month_names[12][11];\n```", "```cpp\nchar month_names[12][11] = {\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n  \"August\", \"September\", \"October\", \"November\", \"December\"\n};\n```", "```cpp\nint multiplication[5][5] = {\n  { 0, 0, 0,  0,  0 },\n  { 0, 1, 2,  3,  4 },\n  { 0, 2, 4,  6,  8 },\n  { 0, 3, 6,  9, 12 },\n  { 0, 4, 8, 12, 16 }\n};\n```", "```cpp\n// This shortcut is ok\nchar month_names[][11] = { \"January\", \"February\" /* ... */ };\n\n// This shortcut is NOT\nchar month_names[][] = { \"January\", \"February\" /* ... */ };\n```", "```cpp\nprintf(\"The name of the first month is: %s\\n\", month_names[0]);\n\n// Output: The name of the first month is: January\n```", "```cpp\nprintf(\"Looking up 3 x 4: %d\\n\", multiplication[3][4]);\n\n// Output: Looking up 3 x 4: 12\n```", "```cpp\n  for (int row = 0; row < 5; row++) {\n    for (int col = 0; col < 5; col++) {\n      printf(\"%3d\", multiplication[row][col]);\n    }\n    printf(\"\\n\");\n  }\n```", "```cpp\nch04$ gcc print2d.c\nch04$ ./a.out\n  0  0  0  0  0\n  0  1  2  3  4\n  0  2  4  6  8\n  0  3  6  9 12\n  0  4  8 12 16\n```", "```cpp\nint line_feed = 012;\nint carriage_return = 015;\nint red = 0xff;\nint blue = 0x7f;\n```", "```cpp\n#include <stdio.h>\n\nint main() {\n  printf(\" Dec  Oct  Hex\\n\");\n  for (int i = 0; i < 16; i++) {\n    printf(\" %3d  %03o  0x%02X\\n\", i, i, i);\n  }\n}\n```", "```cpp\nch04$ gcc dec_oct_hex.c\nch04$ ./a.out\n Dec  Oct  Hex\n   0  000  0x00\n   1  001  0x01\n   2  002  0x02\n   3  003  0x03\n ...\n  13  015  0x0D\n  14  016  0x0E\n  15  017  0x0F\n```", "```cpp\n#include <stdio.h>\n\nint main() {\n  char base;\n  int input;\n\n  printf(\"Convert from? (d)ecimal, (o)ctal, he(x): \");\n  scanf(\"%c\", &base);\n\n  if (base == 'o') {\n    // Get octal input\n    printf(\"Please enter a number in octal: \");\n    scanf(\"%o\", &input);\n  } else if (base == 'x') {\n    // Get hex input\n    printf(\"Please enter a number in hexadecimal: \");\n    scanf(\"%x\", &input);\n  } else {\n    // assume decimal input\n    printf(\"Please enter a number in decimal: \");\n    scanf(\"%d\", &input);\n  }\n  printf(\"Dec: %d,  Oct: %o,  Hex: %x\\n\", input, input, input);\n}\n\n```", "```cpp\nch04$ gcc rosetta.c\n\nch04$ ./a.out\nConvert from? (d)ecimal, (o)ctal, he(x): d\nPlease enter a number in decimal: 55\nDec: 55,  Oct: 67,  Hex: 37\n\nch04$ ./a.out\nConvert from? (d)ecimal, (o)ctal, he(x): x\nPlease enter a number in hexadecimal: 37\nDec: 55,  Oct: 67,  Hex: 37\n\nch04$ ./a.out\nConvert from? (d)ecimal, (o)ctal, he(x): d\nPlease enter a number in decimal: 0x37\nDec: 0,  Oct: 0,  Hex: 0\n```", "```cpp\nchar a = 0xD; // 1101 in binary\nchar b = 0x7; // 0111 in binary\n```", "```cpp\nchar leds = 0;  // Start with everyone off, 0000 0000\n\nleds |= 8;    // Turn on the 4th led from the right, 0000 1000\nleds ^= 0x1f; // Toggle all lights, 0001 0111\nleds &= 0x0f; // Turn off 5th led, leave others as is, 0000 0111\n```", "```cpp\nunsigned char source[9] = { 0xd8,0xff,0xe0,0xff,0x10,0x00,0x46,0x4a,0x46 };\nchar buffer[4] = { 0, 0, 0, 0 };\n\nfor (int i = 0; i < 9; i += 3) {\n  unsigned char byte1 = source[i];\n  unsigned char byte2 = source[i + 1];\n  unsigned char byte3 = source[i + 2];\n  // ...\n}\n```", "```cpp\n  buffer[0] = byte1 >> 2;\n```", "```cpp\n  buffer[1] = (byte1 & 0x03) << 4;   ![1](Images/1.png)\n  buffer[1] |= (byte2 & 0xf0) >> 4;  ![2](Images/2.png)\n```", "```cpp\n  buffer[2] = (byte2 & 0x0f) << 2;\n  buffer[2] |= (byte3 & 0xc0) >> 6;\n```", "```cpp\n  buffer[3] = byte3 & 0x3f;\n```", "```cpp\n  for (int b = 0; b < 4; b++) {\n    if (buffer[b] < 26) {\n      // value 0 - 25, so uppercase letter\n      printf(\"%c\", 'A' + buffer[b]);\n    } else if (buffer[b] < 52) {\n      // value 26 - 51, so lowercase letter\n      printf(\"%c\", 'a' + (buffer[b] - 26));\n    } else if (buffer[b] < 62) {\n      // value 52 - 61, so a digit\n      printf(\"%c\", '0' + (buffer[b] - 52));\n    } else if (buffer[b] == 62) {\n      // our \"+\" case, no need for math, just print it\n      printf(\"+\");\n    } else if (buffer[b] == 63) {\n      // our \"/\" case, no need for math, just print it\n      printf(\"/\");\n    } else {\n      // Yikes! Error. We should never get here.\n      printf(\"\\n\\n Error! Bad 6-bit value: %c\\n\", buffer[b]);\n    }\n  }\n```", "```cpp\n#include <stdio.h>\n\nint main() {\n  // Manually specify a few bytes to encode for now\n  unsigned char source[9] = { 0xd8,0xff,0xe0,0xff,0x10,0x00,0x46,0x4a,0x46 };\n  char buffer[4] = { 0, 0, 0, 0 };\n\n  // sizeof(char) == 1 byte, so the array's size in bytes is also its length\n  int source_length = sizeof(source);\n  for (int i = 0; i < source_length; i++) {\n    printf(\"0x%02x \", source[i]);\n  }\n  printf(\"==> \");\n  for (int i = 0; i < source_length; i += 3) {\n    unsigned char byte1 = source[i];\n    unsigned char byte2 = source[i + 1];\n    unsigned char byte3 = source[i + 2];\n\n    // Now move the appropriate bits into our buffer\n    buffer[0] = byte1 >> 2;\n    buffer[1] = (byte1 & 0x03) << 4;\n    buffer[1] |= (byte2 & 0xf0) >> 4;\n    buffer[2] = (byte2 & 0x0f) << 2;\n    buffer[2] |= (byte3 & 0xc0) >> 6;\n    buffer[3] = byte3 & 0x3f;\n\n    for (int b = 0; b < 4; b++) {\n      if (buffer[b] < 26) {\n        // value 0 - 25, so uppercase letter\n        printf(\"%c\", 'A' + buffer[b]);\n      } else if (buffer[b] < 52) {\n        // value 26 - 51, so lowercase letter\n        printf(\"%c\", 'a' + (buffer[b] - 26));\n      } else if (buffer[b] < 62) {\n        // value 52 - 61, so a digit\n        printf(\"%c\", '0' + (buffer[b] - 52));\n      } else if (buffer[b] == 62) {\n        // our \"+\" case, no need for math, just print it\n        printf(\"+\");\n      } else if (buffer[b] == 63) {\n        // our \"/\" case, no need for math, just print it\n        printf(\"/\");\n      } else {\n        // Yikes! Error. We should never get here.\n        printf(\"\\n\\n Error! Bad 6-bit value: %c\\n\", buffer[b]);\n      }\n    }\n  }\n  printf(\"\\n\");\n}\n```", "```cpp\nch04$ gcc encode64.c\nch04$ ./a.out\n0xd8 0xff 0xe0 0xff 0x10 0x00 0x46 0x4a 0x46  ==> 2P/g/xAARkpG\n```"]
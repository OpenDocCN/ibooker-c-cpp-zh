["```cpp\n//---- <Money.h> ----------------\n\nclass Money { /*...*/ };\n\nMoney operator*( Money money, double factor );\nMoney operator+( Money lhs, Money rhs );\n\n//---- <Item.h> ----------------\n\n#include <Money.h>\n\nclass Item\n{\n public:\n   virtual ~Item() = default;\n\n   virtual Money price() const = 0;\n   // ...\n\n protected:\n   double taxRate_;\n};\n```", "```cpp\nclass PriceStrategy\n{\n public:\n   virtual ~PriceStrategy() = default;\n   virtual Money update( Money price ) const = 0;\n   // ...\n};\n\nclass NullPriceStrategy : public PriceStrategy\n{\n public:\n   Money update( Money price ) const override { return price; }\n};\n```", "```cpp\n//---- <Item.h> ----------------\n\n#include <Money.h>\n\nclass Item\n{\n public:\n   virtual ~Item() = default;\n   virtual Money price() const = 0;\n};\n```", "```cpp\n//---- <DecoratedItem.h> ---------------- \n#include <Item.h>\n#include <memory>\n#include <stdexcept>\n#include <utility>\n\nclass DecoratedItem : public Item  ![1](assets/1.png)\n{\n public:\n   explicit DecoratedItem( std::unique_ptr<Item> item )  ![3](assets/3.png)\n      : item_( std::move(item) )\n   {\n      if( !item_ ) {\n         throw std::invalid_argument( \"Invalid item\" );\n      }\n   }\n\n protected:\n   Item&       item()       { return *item_; }  ![4](assets/4.png)\n   Item const& item() const { return *item_; }\n\n private:\n   std::unique_ptr<Item> item_;  ![2](assets/2.png)\n};\n\n```", "```cpp\n//---- <CppBook.h> ---------------- \n#include <Item.h>\n#include <string>\n#include <utility>\n\nclass CppBook : public Item  ![5](assets/5.png)\n{\n public:\n   CppBook( std::string title, Money price )\n      : title_{ std::move(title) }\n      , price_{ price }\n   {}\n\n   std::string const& title() const { return title_; }\n   Money price() const override { return price_; }\n\n private:\n   std::string title_{};\n   Money price_{};\n};\n\n//---- <ConferenceTicket.h> ---------------- \n#include <Item.h>\n#include <string>\n#include <utility>\n\nclass ConferenceTicket : public Item  ![6](assets/6.png)\n{\n public:\n   ConferenceTicket( std::string name, Money price )\n      : name_{ std::move(name) }\n      , price_{ price }\n   {}\n\n   std::string const& name() const { return name_; }\n   Money price() const override { return price_; }\n\n private:\n   std::string name_{};\n   Money price_{};\n};\n\n```", "```cpp\n//---- <Discounted.h> ---------------- \n#include <DecoratedItem.h>\n\nclass Discounted : public DecoratedItem\n{\n public:\n   Discounted( double discount, std::unique_ptr<Item> item )  ![7](assets/7.png)\n      : DecoratedItem( std::move(item) )\n      , factor_( 1.0 - discount )\n   {\n      if( !std::isfinite(discount) || discount < 0.0 || discount > 1.0 ) {\n         throw std::invalid_argument( \"Invalid discount\" );\n      }\n   }\n\n   Money price() const override\n   {\n      return item().price() * factor_;  ![8](assets/8.png)\n   }\n\n private:\n   double factor_;\n};\n\n```", "```cpp\n//---- <Taxed.h> ---------------- \n#include <DecoratedItem.h>\n\nclass Taxed : public DecoratedItem\n{\n public:\n   Taxed( double taxRate, std::unique_ptr<Item> item )  ![9](assets/9.png)\n      : DecoratedItem( std::move(item) )\n      , factor_( 1.0 + taxRate )\n   {\n      if( !std::isfinite(taxRate) || taxRate < 0.0 ) {\n         throw std::invalid_argument( \"Invalid tax\" );\n      }\n   }\n\n   Money price() const override\n   {\n      return item().price() * factor_;\n   }\n\n private:\n   double factor_;\n};\n\n```", "```cpp\n#include <ConferenceTicket.h>\n#include <CppBook.h>\n#include <Discounted.h>\n#include <Taxed.h>\n#include <cstdlib>\n#include <memory>\n\nint main()\n{\n   // 7% tax: 19*1.07 = 20.33\n   std::unique_ptr<Item> item1(  ![10](assets/10.png)\n      std::make_unique<Taxed>( 0.07,\n         std::make_unique<CppBook>( \"Effective C++\", 19.0 ) ) );\n\n   // 20% discount, 19% tax: (999*0.8)*1.19 = 951.05\n   std::unique_ptr<Item> item2(  ![11](assets/11.png)\n      std::make_unique<Taxed>( 0.19,\n         std::make_unique<Discounted>( 0.2,\n            std::make_unique<ConferenceTicket>( \"CppCon\", 999.0 ) ) ) );\n\n   Money const totalPrice1 = item1->price();  // Results in 20.33\n   Money const totalPrice2 = item2->price();  // Results in 951.05 \n   // ... \n   return EXIT_SUCCESS;\n}\n\n```", "```cpp\n#include <array>\n#include <cstddef>\n#include <cstdlib>\n#include <memory_resource>\n#include <string>\n#include <vector>\n\nint main()\n{\n   std::array<std::byte,1000> raw;  // Note: not initialized! \n   std::pmr::monotonic_buffer_resource\n      buffer{ raw.data(), raw.size(), std::pmr::null_memory_resource() }; ![12](assets/12.png)\n\n   std::pmr::vector<std::pmr::string> strings{ &buffer };\n\n   strings.emplace_back( \"String longer than what SSO can handle\" );\n   strings.emplace_back( \"Another long string that goes beyond SSO\" );\n   strings.emplace_back( \"A third long string that cannot be handled by SSO\" );\n\n   // ... \n   return EXIT_SUCCESS;\n}\n\n```", "```cpp\n// ... \nint main()\n{\n   std::pmr::monotonic_buffer_resource\n      buffer{ std::pmr::new_delete_resource() };  ![13](assets/13.png)\n\n   // ... }\n\n```", "```cpp\n//---- <CustomAllocator.h> ---------------- \n#include <cstdlib>\n#include <memory_resource>\n\nclass CustomAllocator : public std::pmr::memory_resource  ![14](assets/14.png)\n{\n public:\n   CustomAllocator( std::pmr::memory_resource* upstream )  ![16](assets/16.png)\n      : upstream_{ upstream }\n   {}\n\n private:\n   void* do_allocate( size_t bytes, size_t alignment ) override;  ![17](assets/17.png)\n\n   void do_deallocate( void* ptr, [[maybe_unused]] size_t bytes,  ![18](assets/18.png)\n                       [[maybe_unused]] size_t alignment ) override;\n\n   bool do_is_equal(\n      std::pmr::memory_resource const& other ) const noexcept override;  ![19](assets/19.png)\n\n   std::pmr::memory_resource* upstream_{};  ![15](assets/15.png)\n};\n\n```", "```cpp\n// ... #include <CustomAllocator.h>\n\nint main()\n{\n   CustomAllocator custom_allocator{ std::pmr::new_delete_resource() };\n\n   std::pmr::monotonic_buffer_resource buffer{ &custom_allocator };  ![20](assets/20.png)\n\n   // ... }\n\n```", "```cpp\nclass PriceStrategy\n{\n public:\n   virtual ~PriceStrategy() = default;\n   virtual Money update( Money price ) const = 0;\n   // ...\n};\n\nclass DecoratedPriceStrategy : public PriceStrategy\n{\n public:\n   // ...\n private:\n   std::unique_ptr<PriceStrategy> priceModifier_;\n};\n\nclass DiscountedPriceStrategy : public DecoratedPriceStrategy\n{\n public:\n   Money update( Money price ) const override;\n   // ...\n};\n```", "```cpp\n//---- <TaxStrategy.h> ---------------- \n#include <Money.h>\n\nclass TaxStrategy  ![21](assets/21.png)\n{\n public:\n   virtual ~TaxStrategy() = default;\n   virtual Money applyTax( Money price ) const = 0;\n   // ... };\n\n//---- <TaxedItem.h> ---------------- \n#include <Money.h>\n#include <TaxStrategy.h>\n#include <memory>\n\nclass TaxedItem\n{\n public:\n   explicit TaxedItem( std::unique_ptr<Item> item\n                     , std::unique_ptr<TaxStrategy> taxer )  ![22](assets/22.png)\n      : item_( std::move(item) )\n      , taxer_( std::move(taxer) )\n   {\n      // Check for a valid item and tax strategy\n   }\n\n   Money netPrice() const  // Price without taxes ![23](assets/23.png)\n   {\n      return price();\n   }\n\n   Money grossPrice() const  // Price including taxes ![24](assets/24.png)\n   {\n      return taxer_.applyTax( item_.price() );\n   }\n\n private:\n   std::unique_ptr<Item> item_;\n   std::unique_ptr<TaxStrategy> taxer_;\n};\n\n```", "```cpp\n//---- <ConferenceTicket.h> ----------------\n\n#include <Money.h>\n#include <string>\n#include <utility>\n\nclass ConferenceTicket\n{\n public:\n   ConferenceTicket( std::string name, Money price )\n      : name_{ std::move(name) }\n      , price_{ price }\n   {}\n\n   std::string const& name() const { return name_; }\n   Money price() const { return price_; }\n\n private:\n   std::string name_;\n   Money price_;\n};\n```", "```cpp\n//---- <PricedItem.h> ---------------- \n#include <Money.h>\n\ntemplate< typename T >\nconcept PricedItem =  ![3](assets/3.png)\n   requires ( T item ) {\n      { item.price() } -> std::same_as<Money>;\n   };\n\n//---- <Discounted.h> ---------------- \n#include <Money.h>\n#include <PricedItem.h>\n#include <utility>\n\ntemplate< double discount, PricedItem Item >\nclass Discounted  // Using composition ![1](assets/1.png)\n{\n public:\n   template< typename... Args >\n   explicit Discounted( Args&&... args )\n      : item_{ std::forward<Args>(args)... }\n   {}\n\n   Money price() const {\n      return item_.price() * ( 1.0 - discount );\n   }\n\n private:\n   Item item_;\n};\n\n//---- <Taxed.h> ---------------- \n#include <Money.h>\n#include <PricedItem.h>\n#include <utility>\n\ntemplate< double taxRate, PricedItem Item >\nclass Taxed : private Item  // Using inheritance ![2](assets/2.png)\n{\n public:\n   template< typename... Args >\n   explicit Taxed( Args&&... args )\n      : Item{ std::forward<Args>(args)... }\n   {}\n\n   Money price() const {\n      return Item::price() * ( 1.0 + taxRate );\n   }\n};\n\n```", "```cpp\n#include <ConferenceTicket.h>\n#include <Discounted.h>\n#include <Taxed.h>\n#include <cstdlib>\n\nint main()\n{\n   // 20% discount, 15% tax: (499*0.8)*1.15 = 459.08\n   Taxed<0.15,Discounted<0.2,ConferenceTicket>> item{ \"Core C++\", 499.0 };\n\n   Money const totalPrice = item.price();  // Results in 459.08\n\n   // ...\n\n   return EXIT_SUCCESS;\n}\n```", "```cpp\nusing DiscountedConferenceTicket = Discounted<0.2,ConferenceTicket>;\nusing TaxedConferenceTicket = Taxed<0.19,ConferenceTicket>;\nusing TaxedDiscountedConferenceTicket =\n   Taxed<0.19,Discounted<0.2,ConferenceTicket>>;\nusing DiscountedTaxedConferenceTicket =\n   Discounted<0.2,Taxed<0.19,ConferenceTicket>>;\n```", "```cpp\n//---- <Item.h> ---------------- \n#include <Money.h>\n#include <memory>\n#include <utility>\n\nclass Item\n{\n public:\n   // ... \n private:\n   struct Concept  ![4](assets/4.png)\n   {\n      virtual ~Concept() = default;\n      virtual Money price() const = 0;\n      virtual std::unique_ptr<Concept> clone() const = 0;\n   };\n\n   template< typename T >\n   struct Model : public Concept  ![5](assets/5.png)\n   {\n      explicit Model( T const& item ) : item_( item ) {}\n      explicit Model( T&& item ) : item_( std::move(item) ) {}\n\n      Money price() const override\n      {\n         return item_.price();\n      }\n\n      std::unique_ptr<Concept> clone() const override\n      {\n         return std::make_unique<Model<T>>(*this);\n      }\n\n      T item_;\n   };\n\n   std::unique_ptr<Concept> pimpl_;\n};\n\n```", "```cpp\n//---- <Item.h> ---------------- \n// ... \nclass Item\n{\n public:\n   template< typename T >\n   Item( T item )  ![6](assets/6.png)\n      : pimpl_( std::make_unique<Model<T>>( std::move(item) ) )\n   {}\n\n   Item( Item const& item ) : pimpl_( item.pimpl_->clone() ) {}\n\n   Item& operator=( Item const& item )\n   {\n      pimpl_ = item.pimpl_->clone();\n      return *this;\n   }\n\n   ~Item() = default;\n   Item( Item&& ) = default;\n   Item& operator=( Item&& item ) = default;\n\n   Money price() const { return pimpl_->price(); }  ![7](assets/7.png)\n\n private:\n   // ... };\n\n```", "```cpp\n//---- <Discounted.h> ----------------\n\n#include <Item.h>\n#include <utility>\n\nclass Discounted\n{\n public:\n   Discounted( double discount, Item item )\n      : item_( std::move(item) )\n      , factor_( 1.0 - discount )\n   {}\n\n   Money price() const\n   {\n      return item_.price() * factor_;\n   }\n\n private:\n   Item item_;\n   double factor_;\n};\n\n//---- <Taxed.h> ----------------\n\n#include <Item.h>\n#include <utility>\n\nclass Taxed\n{\n public:\n   Taxed( double taxRate, Item item )\n      : item_( std::move(item) )\n      , factor_( 1.0 + taxRate )\n   {}\n\n   Money price() const\n   {\n      return item_.price() * factor_;\n   }\n\n private:\n   Item item_;\n   double factor_;\n};\n```", "```cpp\n#include <ConferenceTicket.h>\n#include <Discounted.h>\n#include <Taxed.h>\n\nint main()\n{\n   // 20% discount, 15% tax: (499*0.8)*1.15 = 459.08\n   Item item(Taxed(0.19, Discounted(0.2, ConferenceTicket{\"Core C++\",499.0})));\n\n   Money const totalPrice = item.price();\n\n   // ...\n\n   return EXIT_SUCCESS;\n}\n```"]
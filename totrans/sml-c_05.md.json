["```cpp\nvoid print_help() {\n  printf(\"This program prints a friendly greeting.\\n\");\n  printf(\"When prompted, you can type in a name \\n\");\n  printf(\"and hit the return key. Max length is 24.\\n\");\n}\n```", "```cpp\n#include <stdio.h>\n\nvoid print_help() {\n  printf(\"This program prints a friendly greeting.\\n\");\n  printf(\"When prompted, you can type in a name \\n\");\n  printf(\"and hit the return key. Max length is 24.\\n\");\n}\n\nint main() {\n  char name[25];\n\n  do {\n    // Call our newly minted help function!\n    print_help();\n\n    // Now prompt the user, but if they enter an 'h',\n    // start over with the help message\n    printf(\"Please enter a name: \");\n    scanf(\"%s\", name);\n  } while (name[0] == 'h' && name[1] == '\\0');\n\n  // Ok, we must have a name to greet!\n  printf(\"Hello, %s!\\n\", name);\n}\n```", "```cpp\nch05$ gcc help_demo.c\nch05$ ./a.out\nThis program prints a friendly greeting.\nWhen prompted, you can type in a name\nand hit the return key. Max length is 24.\nPlease enter a name: h\nThis program prints a friendly greeting.\nWhen prompted, you can type in a name\nand hit the return key. Max length is 24.\nPlease enter a name: joe\nHello, joe!\n```", "```cpp\n// Correct and valid parameter declarations:\nvoid average(double v1, double v2, double v3) { ...\nvoid plot(int x, int y) { ...\nvoid printUser(char *name, long id) { ...\n\n// Incorrect declarations:\nvoid bad_average(double v1, v2, v3) { // every parameter needs a type\nvoid bad_plot(int x; int y) { // separate parameters with commas\nvoid bad_print(char *name, long id = 0) { // do not initialize a parameter\n\n```", "```cpp\nvoid print_average(float a, float b) {\n  float average = (a + b) / 2;\n  printf(\"The average of %.2f and %.2f is %.2f\\n\", a, b, average);\n}\n```", "```cpp\n  float num1, num2;\n  printf(\"Please enter two numbers separated by a space: \");\n  scanf(\"%f %f\", &num1, &num2);\n  print_average(num1, num2);\n```", "```cpp\n  float x = 17.17;\n  float y = 6.2;\n  print_average(3.1415, 2.71828);\n  print_average(x, y);\n  print_average(x * x, y * y);\n  print_average(x, 3.1415);\n```", "```cpp\nvoid greet(char name[]) {\n  printf(\"Hello, %s\\n\", name);\n}\n```", "```cpp\n#include <stdio.h>\n\nvoid print_help() {\n  printf(\"This program prints a friendly greeting.\\n\");\n  printf(\"When prompted, you can type in a name \\n\");\n  printf(\"and hit the return key. Max length is 24.\\n\");\n}\n\nvoid greet(char name[]) {\n  printf(\"Hello, %s\\n\", name);\n}\n\nint main() {\n  char name[25];\n\n  // First, tell them how to use the program\n  print_help();\n\n  // Now, prompt them for a name (just the once)\n  printf(\"Please enter your name: \");\n  scanf(\"%s\", name);\n\n  // Finally, call our new greeting function with our name argument\n  greet(name);\n}\n```", "```cpp\nch05$ gcc greeting.c\nch05$ ./a.out\nThis program prints a friendly greeting.\nWhen prompted, you can type in a name\nand hit the return key. Max length is 24.\nPlease enter your name: Brian\nHello, Brian\nch05$ ./a.out\nThis program prints a friendly greeting.\nWhen prompted, you can type in a name\nand hit the return key. Max length is 24.\nPlease enter your name: Vivienne\nHello, Vivienne\n```", "```cpp\nvoid repeat(char thing[], int count) {\n  for (int i = 0; i < count; i++) {\n    printf(\"%d: %s\\n\", i, thing);\n  }\n}\n```", "```cpp\n// repeat(\"Dennis\", 5);\n0: Dennis\n1: Dennis\n2: Dennis\n3: Dennis\n4: Dennis\n```", "```cpp\nvoid repeat(char thing[], int count) {\n  if (count < 1) {\n    printf(\"Invalid count: %d. Skipping.\\n\", count);\n    return;\n  }\n  for (int i = 0; i < count; i++) {\n    printf(\"%d: %s\\n\", i, thing);\n  }\n}\n```", "```cpp\nfloat calc_average(float a, float b) {\n  float average = (a + b) / 2;\n  return average;\n}\n```", "```cpp\nfloat calc_average(float a, float b) {\n  return (a + b) / 2;\n}\n```", "```cpp\nfloat avg = calc_average(12.34, 56.78);\nfloat triple = 3 * calc_average(3.14, 1.414);\nprintf(\"The first average is %.2f\\n\", avg);\nprintf(\"Our tripled average is %.2f\\n\", triple);\nprintf(\"A direct average: %.2f\\n\", calc_average(8, 12));\n```", "```cpp\nch05$ gcc averages2.c\nch05$ ./a.out\nThe first average is 34.56\nOur tripled average is 6.83\nA direct average: 10.00\n```", "```cpp\nprintf(\"This is a typical print statement.\\n\");\nint total_bytes = printf(\"This is also a print statement.\\n\");\nprintf(\"The previous printf displayed %d bytes.\\n\", total_bytes);\n```", "```cpp\nch05$ gcc printf_bytes.c\nch05$ ./a.out\nThis is a typical print statement.\nThis is also a print statement.\nThe previous printf displayed 32 bytes.\n```", "```cpp\n#include <stdio.h>\n\nfloat calc_average(float a, float b) {\n  return (a + b) / 2;\n}\n\nvoid print_average(float a, float b) {\n  float average = calc_average(a, b);\n  printf(\"The average of %.2f and %.2f is %.2f\\n\", a, b, average);\n}\n\nint main() {\n  float num1, num2;\n  printf(\"Please enter two numbers separated by a space: \");\n  scanf(\"%f %f\", &num1, &num2);\n  print_average(num1, num2);\n\n  float x = 17.17;\n  float y = 6.2;\n  print_average(3.1415, 2.71828);\n  print_average(x, y);\n  print_average(x * x, y * y);\n  print_average(x, 3.1415);\n}\n\n```", "```cpp\nch05$ gcc averages3.c\nch05$ ./a.out\nPlease enter two numbers separated by a space: 12.34 56.78\nThe average of 12.34 and 56.78 is 34.56\nThe average of 3.14 and 2.72 is 2.93\nThe average of 17.17 and 6.20 is 11.68\nThe average of 294.81 and 38.44 is 166.62\nThe average of 17.17 and 3.14 is 10.16\n```", "```cpp\nF(n) = F(n - 1) + F(n - 2)\n```", "```cpp\nint fibonacci(int n) {\n  // Base case 0\n  // We'll cheat and return zero for negative numbers as well\n  if (n <= 0) {\n    return 0;\n  }\n  // Base case 1\n  if (n == 1) {\n    return 1;\n  }\n  // recursive call will go here\n}\n```", "```cpp\n  // recursive call\n  return fibonacci(n - 1) + fibonacci(n - 2);\n```", "```cpp\n#include <stdio.h>\n\nint fibonacci(int n) {\n  // Base case 0\n  // We'll lazily return zero for negative numbers as well\n  if (n <= 0) {\n    return 0;\n  }\n  // Base case 1\n  if (n == 1) {\n    return 1;\n  }\n\n  // recurring call\n  return (fibonacci(n-1) + fibonacci(n-2));\n}\n\nint main() {\n  printf(\"The 6th Fibonnaci number is: %d\\n\", fibonacci(6));\n  printf(\"The 42nd Fibonnaci number is: %d\\n\", fibonacci(42));\n  printf(\"The first 10 Fibonacci numbers are:\\n\");\n  for (int f = 0; f < 10; f++) {\n    printf(\"  %d\", fibonacci(f));\n  }\n  printf(\"\\n\");\n}\n```", "```cpp\nch05$ gcc fib.c\nch05$ ./a.out\nThe 6th Fibonnaci number is: 8\nThe 42nd Fibonnaci number is: 267914296\nThe first 10 Fibonacci numbers are:\n  0  1  1  2  3  5  8  13  21  34\n```", "```cpp\nvoid print_average(float a, float b) {\n  float average = (a + b) / 2;\n  printf(\"The average of %.2f and %.2f is %.2f\\n\", a, b, average);\n}\n```", "```cpp\nvoid print_average_2(float a, float b) {\n  float average = (a + b) / 2;\n  printf(\"The two numbers average out to %.2f\\n\", average);\n}\n\nvoid print_average_3(float a, float b, float c) {\n  float average = (a + b + c) / 3;\n  printf(\"The three numbers average out to %.2f\\n\", average);\n}\n```", "```cpp\nfloat calc_average_2(float a, float b) {\n  float average = (a + b) / 2;\n  return average;\n}\n\nint main() {\n  float avg1 = calc_average_2(18.5, 21.1);\n  float avg2 = calc_average_2(16.3, 19.4);\n  float average = calc_average_2(avg1, avg2);\n  printf(\"The average of the two averages is: %.2f\\n\", average);\n}\n```", "```cpp\n#include <stdio.h>\n\nchar buffer[30];\n\nvoid all_caps() {\n  char diff = 'a' - 'A';\n  for (int b = 0; b < 30 && buffer[b] != 0; b++) {\n    if (buffer[b] >= 'a' && buffer[b] <= 'z') {\n      // We have a lowercase letter, so change this slot\n      // in the char array to its uppercase cousin\n      buffer[b] -= diff;\n    }\n  }\n}\n\nint main() {\n  printf(\"Please enter a name or phrase: \");\n  scanf(\"%[^\\n]s\", buffer);\n  printf(\"Before all_caps(): %s\\n\", buffer);\n  all_caps();\n  printf(\"After all_caps(): %s\\n\", buffer);\n}\n```", "```cpp\nch05$ gcc globals.c\nch05$ ./a.out\nPlease enter a name or phrase: This is a test.\nBefore all_caps(): This is a test.\nAfter all_caps(): THIS IS A TEST.\n```", "```cpp\n#include <stdio.h>\n\nchar buffer[30];\n\nvoid all_caps() {\n  char buffer[30] = \"This is a local buffer!\";\n  char diff = 'a' - 'A';\n  for (int b = 0; b < 30 && buffer[b] != 0; b++) {\n    if (buffer[b] >= 'a' && buffer[b] <= 'z') {\n      // We have a lowercase letter, so change this slot\n      // in the char array to its uppercase cousin\n      buffer[b] -= diff;\n    }\n  }\n  printf(\"Inside all_caps(): %s\\n\", buffer);\n}\n\nint main() {\n  printf(\"Please enter a name or phrase: \");\n  scanf(\"%[^\\n]s\", buffer);\n  printf(\"Before all_caps(): %s\\n\", buffer);\n  all_caps();\n  printf(\"After all_caps(): %s\\n\", buffer);\n}\n```", "```cpp\nch05$ gcc globals2.c\nch05$ ./a.out\nPlease enter a name or phrase: A second global test.\nBefore all_caps(): A second global test.\nInside all_caps(): THIS IS A LOCAL BUFFER!\nAfter all_caps(): A second global test.\n```", "```cpp\nch01$ gcc -o hello hello.c\nch01$ ./hello\nHello, world\nch01$ echo $?\n0\n```", "```cpp\nC:\\Users\\marc\\Documents\\smallerc> gcc -o hello.exe hello.c\n\nC:\\Users\\marc\\Documents\\smallerc> hello\nHello world\n\nC:\\Users\\marc\\Documents\\smallerc>echo %ERRORLEVEL%\n0\n```", "```cpp\n#include <stdio.h>\n\nint main() {\n  char answer;\n  printf(\"Would you like to succeed (s) or fail (f)? \");\n  scanf(\"%c\", &answer);\n  if (answer == 's') {\n    return 0;\n  } else if (answer == 'f') {\n    return 1;\n  } else {\n    printf(\"You supplied an unsupported answer: %c\\n\", answer);\n    return 2;\n  }\n}\n\n```", "```cpp\nch05$ gcc exitcode.c\nch05$ ./a.out\nWould you like to succeed (s) or fail (f)? s\nch05$ echo $?\n0\nch05$ ./a.out\nWould you like to succeed (s) or fail (f)? f\nch05$ echo $?\n1\nch05$ ./a.out\nWould you like to succeed (s) or fail (f)? invalid\nYou supplied an unsupported answer: i\nch05$ echo $?\n2\n```", "```cpp\nint main(int argc, char *argv[]) { // ...\n\n```", "```cpp\n#include <stdio.h>\n\nvoid print_help(char *program_name) {\n  printf(\"You can enter several command-line arguments like this:\\n\");\n  printf(\"%s this is four words\\n\", program_name);\n}\n\nint main(int argc, char *argv[]) {\n  if (argc == 1) {\n    printf(\"Only the name of the program '%s' was given.\\n\", argv[0]);\n  } else if (argc == 2) {\n    // Might be a request for help\n    int len = sizeof(argv[1]);\n    if (len >= 2 && argv[1][0] == '-' && argv[1][1] == 'h') {\n      print_help(argv[0]);\n    } else {\n      printf(\"Found one, non-help argument: %s\\n\", argv[1]);\n    }\n  } else {\n    printf(\"Found %c command-line arguments:\\n\", argc);\n    for (int i = 0; i < argc; i++) {\n      printf(\"  %s\\n\", argv[i]);\n    }\n  }\n}\n```", "```cpp\nch05$ gcc argv.c\nch05$ ./a.out this is a test!\nFound  command-line arguments:\n  ./a.out\n  this\n  is\n  a\n  test!\n```", "```cpp\nch05$ ./a.out -h\nYou can enter several command-line arguments like this:\n./a.out this is four words\nch05$ gcc -o argv argv.c\nch05$ ./argv -h\nYou can enter several command-line arguments like this:\n./argv this is four words\n```", "```cpp\n./sum 22 154 6 73\nThe sum of these 4 numbers is 255\n```"]
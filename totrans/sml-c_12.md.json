["```cpp\n#include \"AdafruitIO_WiFi.h\"\n\n#define IO_USERNAME  \"userNameGoesHere\"\n#define IO_KEY       \"ioKeyGoesHere\"\n#define WIFI_SSID    \"HomeWifi\"\n#define WIFI_PASS    \"password\"\n```", "```cpp\n#include <SPI.h> ![1](Images/1.png)\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n\n// Use credentials from config.h to set up our feed #include \"config.h\" ![2](Images/2.png)\nAdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);\nAdafruitIO_Feed *smallerc = io.feed(\"smallerc\");\n\n// Set up our OLED #define SCREEN_WIDTH 128 // OLED width, in pixels #define SCREEN_HEIGHT 32 // OLED height, in pixels #define OLED_RESET     4 // Reset pin # #define SCREEN_ADDRESS 0x3C // 128x32 screen Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,  ![3](Images/3.png)\n    &Wire, OLED_RESET);\nchar statusline[22] = \"Starting...\";\n\n// A few things for keeping an average temperature reading #define ADJUST 3.33 /* my office reads about 3 degrees C cold */\nfloat total = 0.0;\nint   count = 0;\n\nvoid setup() {\n  Serial.begin(115200);\n  // SSD1306_SWITCHCAPVCC = generate voltage from 3.3V internally\n  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {\n    Serial.println(F(\"SSD1306 allocation failed\"));    ![4](Images/4.png)\n    for(;;); // Don't proceed, loop forever\n  }\n\n  // Show Adafruit splash screen initialized by the display library\n  display.display();\n\n  // Now set up the connection to adafruit.io\n  Serial.print(\"Connecting to Adafruit IO\");\n  io.connect();                                        ![5](Images/5.png)\n  // wait for a connection\n  while(io.status() < AIO_CONNECTED) {\n    Serial.print(\".\");\n    delay(500);\n  }\n\n  // we are connected\n  Serial.println();\n  Serial.println(io.statusText());\n\n  // Set up our display for simple (if small) text\n  display.clearDisplay();\n  display.setTextSize(1);      // Normal 1:1 pixel scale\n  display.setTextColor(SSD1306_WHITE); // Draw white text\n  display.setCursor(0, 0);     // Start at top-left corner\n  display.cp437(true);         // Use 'Code Page 437' font\n  display.println(statusline); // Show our starting status\n  display.display();           // Update the actual display }\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  int reading = analogRead(A2);                        ![6](Images/6.png)\n  float voltage = reading / 1024.0;\n  if (count == 0) {\n    total = voltage;\n  } else {\n    total += voltage;\n  }\n  count++;\n  float avg = total / count;\n  float tempC = (avg - 0.5) * 100;\n  float tempF = tempC * 1.8 + 32;\n  if (count % 100 == 0) {\n    // Update our display every 10 seconds ![7](Images/7.png)\n    display.clearDisplay();\n    display.setCursor(0, 0);\n    display.println(statusline);\n    display.print(reading);\n    display.print(\"  \");\n    display.println(voltage);\n    display.print(tempC);\n    display.println(\"\\370 C\");\n    display.print(tempF);\n    display.println(\"\\370 F\");\n    display.display();\n    strcpy(statusline, \"Reading...\");\n  }\n  if (count % 600 == 0) {\n    // Update our IoT feed every minute\n    smallerc->save(tempF);                             ![8](Images/8.png)\n    strcpy(statusline, \"Feed updated\");\n  }\n  delay(100);\n}\n```"]
["```cpp\n#include <Adafruit_NeoPixel.h>\n\n#define LED_PIN     4\n#define LED_COUNT   8\n#define RATE     5000\n#define PI_2 6.283185\n\nAdafruit_NeoPixel stick(LED_COUNT, LED_PIN, NEO_GRB);\nuint32_t colors[] = {\n  0xFF0000, 0x00FF00, 0x0000FF, 0x3377FF,\n  0x00FFFF, 0xFF00FF, 0xFFFF00, 0xFF7733\n};\n\nvoid setup() {\n  Serial.begin(115200);\n  stick.begin();             // Initialize our LEDs\n  stick.setBrightness(128);  // Set a comfortable brightness\n  // Show our colors for a few seconds before animating\n  for (byte p = 0; p < LED_COUNT; p++) {\n    stick.setPixelColor(p, colors[p]);\n  }\n  stick.show();\n  delay(RATE);\n}\n\nvoid loop() {\n  double ms_in_radians = (millis() % RATE) * PI_2 / RATE;\n  double breath = (sin(ms_in_radians) + 1.0) / 2.0;\n  for (byte p = 0; p < LED_COUNT; p++) {\n    byte red   = (colors[p] & 0xFF0000) >> 16;\n    byte green = (colors[p] & 0x00FF00) >> 8;\n    byte blue  = colors[p] & 0x0000FF;\n    red = (byte)(red * breath);\n    green = (byte)(green * breath);\n    blue = (byte)(blue * breath);\n    stick.setPixelColor(p, red, green, blue);\n  }\n  stick.show();\n  delay(10);\n}\n```", "```cpp\nint dozen = 12;\nint six = dozen * 0.5;\nint half_a_dozen = dozen / 2;\n```", "```cpp\n  double ms_in_radians = (millis() % RATE) * PI_2 / RATE;\n  double breath = (sin(ms_in_radians) + 1.0) / 2.0;\n  // ...\n  red = (byte)(red * breath);\n```", "```cpp\n  uint8_t ms = (millis() % RATE) / 20; // close enough :)\n  uint8_t breath = stick.sine8(ms);\n  // ...\n  red = red * breath / 255;\n```", "```cpp\n---\nbyte colors[8][3] = {\n  { 0xFF, 0x00, 0x00 }, { 0x00, 0xFF, 0x00 },\n  { 0x00, 0x00, 0xFF }, { 0x33, 0x77, 0xFF },\n  { 0x00, 0xFF, 0xFF }, { 0xFF, 0x00, 0xFF },\n  { 0xFF, 0xFF, 0x00 }, { 0xFF, 0x77, 0x33 }\n};\n---\n```", "```cpp\n---\nbyte colors[] = {\n  0xFF, 0x00, 0x00,   0x00, 0xFF, 0x00,\n  0x00, 0x00, 0xFF,   0x33, 0x77, 0xFF,\n  0x00, 0xFF, 0xFF,   0xFF, 0x00, 0xFF,\n  0xFF, 0xFF, 0x00,   0xFF, 0x77, 0x33\n};\n---\n```", "```cpp\nvoid setup() {\n  // ...\n  for (byte p = 0; p < LED_COUNT; p++) {\n    stick.setPixelColor(p, colors[p][0], colors[p][1], colors[p][2]);\n  }\n  // ...\n}\n\nvoid loop() {\n  // ...\n  for (byte p = 0; p < LED_COUNT; p++) {\n    byte red   = (byte)(colors[p][0] * breath);\n    byte green = (byte)(colors[p][1] * breath);\n    byte blue  = (byte)(colors[p][2] * breath);\n    stick.setPixelColor(p, red, green, blue);\n  }\n  // ...\n}\n```", "```cpp\n#include <Adafruit_NeoPixel.h>\n\n#define LED_PIN     4\n#define LED_COUNT   8\n#define RATE     5000\n\nAdafruit_NeoPixel stick(LED_COUNT, LED_PIN, NEO_GRB);\nbyte colors[8][3] = {                                    ![1](Images/1.png)\n  { 0xFF, 0x00, 0x00 }, { 0x00, 0xFF, 0x00 },\n  { 0x00, 0x00, 0xFF }, { 0x33, 0x77, 0xFF },\n  { 0x00, 0xFF, 0xFF }, { 0xFF, 0x00, 0xFF },\n  { 0xFF, 0xFF, 0x00 }, { 0xFF, 0x77, 0x33 }\n};\n\nuint8_t breaths[256];                                    ![2](Images/2.png)\n\nvoid setup() {\n  Serial.begin(115200);\n  stick.begin();            // Initialize our LEDs\n  stick.setBrightness(80);  // Set a comfortable brightness\n  // Show our colors for a few seconds before animating\n  for (byte p = 0; p < LED_COUNT; p++) {\n    stick.setPixelColor(p,                               ![3](Images/3.png)\n        colors[p][0], colors[p][1], colors[p][2]);\n  }\n  stick.show();\n  // Now initialize our sine lookup table\n  for (int s = 0; s <= 255; s++) {                       ![4](Images/4.png)\n    breaths[s] = stick.sine8(s);\n  }\n  delay(2000);\n}\n\nvoid loop() {\n  uint8_t ms = (millis() % RATE) / 20;                   ![5](Images/5.png)\n  uint8_t breath = breaths[ms];                          ![6](Images/6.png)\n  for (byte p = 0; p < LED_COUNT; p++) {\n    byte red   = colors[p][0] * breath / 255;\n    byte green = colors[p][1] * breath / 255;\n    byte blue  = colors[p][2] * breath / 255;\n    stick.setPixelColor(p, red, green, blue);\n  }\n  stick.show();\n  delay(10);\n}\n```", "```cpp\n  red = red * breath / 255;\n  //  = 255 *   255  / 255;\n  //  = 65025 / 255;\n  //  = 255\n```", "```cpp\n  red = (red * breath) >> 8;\n```", "```cpp\n  uint8_t ms = (millis() & 0x0fff) / 20;  // Bit mask with 12 bits\n```", "```cpp\n  uint8_t ms = (millis() & 0x0fff) >> 4;\n```", "```cpp\nvoid loop() {\n  uint8_t ms = (millis() & 0x0fff) >> 4;\n  uint8_t breath = breaths[ms];\n\n  byte red, green, blue;\n\n  // Pixel 0\n  red   = (colors[0][0] * breath) >> 8;\n  green = (colors[0][1] * breath) >> 8;\n  blue  = (colors[0][2] * breath) >> 8;\n  stick.setPixelColor(0, red, green, blue);\n\n  // Pixel 1\n  red   = (colors[1][0] * breath) >> 8;\n  green = (colors[1][1] * breath) >> 8;\n  blue  = (colors[1][2] * breath) >> 8;\n  stick.setPixelColor(1, red, green, blue);\n\n  // Pixel 2\n  // ...\n\n  stick.show();\n  delay(10);\n}\n```", "```cpp\nint find = 8; // we want the 8th Fibonacci number in this example\nint antepenultimate = 0; // F(n - 2)\nint penultimate = 0;     // F(n - 1)\nint ultimate = 1;        // F(n)\n\nfor (int f = 1; f < find; f++) {\n  antepenultimate = penultimate;\n  penultimate = ultimate;\n  ultimate = penultimate + antepenultimate;\n}\n// After the loop completes, ultimate contains the answer, 21\n```", "```cpp\n#include <Adafruit_NeoPixel.h>\n\n#define LED_PIN     4\n#define LED_COUNT   8\n\nAdafruit_NeoPixel stick(LED_COUNT, LED_PIN, NEO_GRB);\nbyte colors[8][3] = {\n  { 0xFF, 0x00, 0x00 }, { 0x00, 0xFF, 0x00 },\n  { 0x00, 0x00, 0xFF }, { 0x33, 0x77, 0xFF },\n  { 0x00, 0xFF, 0xFF }, { 0xFF, 0x00, 0xFF },\n  { 0xFF, 0xFF, 0x00 }, { 0xFF, 0x77, 0x33 }\n};\n\nuint8_t breaths[256];\n\nvoid setup() {\n  Serial.begin(115200);\n  stick.begin();            // Initialize our LEDs\n  stick.setBrightness(80);  // Set a comfortable brightness\n  // Show our colors for a few seconds before animating\n  for (byte p = 0; p < LED_COUNT; p++) {\n    stick.setPixelColor(p, colors[p][0], colors[p][1], colors[p][2]);\n  }\n  stick.show();\n  // Now initialize our sine lookup table\n  for (int s = 0; s <= 255; s++) {\n    breaths[s] = stick.sine8(s);\n  }\n  delay(2000);\n}\n\nvoid loop() {\n  uint8_t ms = (millis() & 0x0fff) >> 4;\n  uint8_t breath = breaths[ms];\n  for (byte p = 0; p < LED_COUNT; p++) {\n    byte red   = (colors[p][0] * breath) >> 8;\n    byte green = (colors[p][1] * breath) >> 8;\n    byte blue  = (colors[p][2] * breath) >> 8;\n    stick.setPixelColor(p, red, green, blue);\n  }\n  stick.show();\n  delay(10);\n}\n```"]
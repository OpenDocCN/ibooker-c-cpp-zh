["```cpp\n/* Sorts the numbers of the 'array' in ascending order.\n 'length' defines the number of elements in the 'array'. */\nvoid sort(int* array, int length);\n```", "```cpp\nvoid sort(int* array, int length)\n{\n  /* here goes the implementation*/\n}\n```", "```cpp\nvoid sendByte(char byte);\nchar receiveByte();\nvoid setIpAddress(char* ip);\nvoid setMacAddress(char* mac);\n```", "```cpp\ntypedef struct SORT_STRUCT* SORT_HANDLE;\n\nSORT_HANDLE prepareSort(int* array, int length);\nvoid sort(SORT_HANDLE context);\n```", "```cpp\nstruct SORT_STRUCT\n{\n  int* array;\n  int length;\n  /* other parameters like sort order */\n};\n\nSORT_HANDLE prepareSort(int* array, int length)\n{\n  struct SORT_STRUCT* context = malloc(sizeof(struct SORT_STRUCT));\n  context->array = array;\n  context->length = length;\n\n  /* fill context with required data or state information */\n\n  return context;\n}\n\nvoid sort(SORT_HANDLE context)\n{\n  /* operate on context data */\n}\n```", "```cpp\n/* the INTERNAL_DRIVER_STRUCT contains data shared by the functions (like\n how to select the interface card the driver is responsible for) */\ntypedef struct INTERNAL_DRIVER_STRUCT* DRIVER_HANDLE;\n\n/* 'initArg' contains information for the implementation to identify\n the exact interface for the driver instance */\nDRIVER_HANDLE driverCreate(void* initArg);\nvoid driverDestroy(DRIVER_HANDLE h);\nvoid sendByte(DRIVER_HANDLE h, char byte);\nchar receiveByte(DRIVER_HANDLE h);\nvoid setIpAddress(DRIVER_HANDLE h, char* ip);\nvoid setMacAddress(DRIVER_HANDLE h, char* mac);\n```", "```cpp\n/* The compare function should return true if x is smaller than y, else false */\ntypedef bool (*COMPARE_FP)(int x, int y);\n\nvoid sort(COMPARE_FP compare, int* array, int length);\n```", "```cpp\nvoid sort(COMPARE_FP compare, int* array, int length)\n{\n  int i, j;\n  for(i=0; i<length; i++)\n  {\n    for(j=i; j<length; j++)\n    {\n      /* call provided user function */\n      if(compare(array[i], array[j]))\n      {\n        swap(&array[i], &array[j]);\n      }\n    }\n  }\n}\n```", "```cpp\n#define ARRAY_SIZE 4\n\nbool compareFunction(int x, int y)\n{\n  return x<y;\n}\n\nvoid sortData()\n{\n  int array[ARRAY_SIZE] = {3, 5, 6, 1};\n  sort(compareFunction, array, ARRAY_SIZE);\n}\n```", "```cpp\ntypedef struct INTERNAL_DRIVER_STRUCT* DRIVER_HANDLE;\ntypedef void (*DriverSend_FP)(char byte);      /* this is the           */\ntypedef char (*DriverReceive_FP)();            /* interface definition */\n\nstruct DriverFunctions\n{\n  DriverSend_FP fpSend;\n  DriverReceive_FP fpReceive;\n};\n\nDRIVER_HANDLE driverCreate(void* initArg, struct DriverFunctions f);\nvoid driverDestroy(DRIVER_HANDLE h);\nvoid sendByte(DRIVER_HANDLE h, char byte);   /* internally calls fpSend    */\nchar receiveByte(DRIVER_HANDLE h);           /* internally calls fpReceive */\nvoid setIpAddress(DRIVER_HANDLE h, char* ip);\nvoid setMacAddress(DRIVER_HANDLE h, char* mac);\n```", "```cpp\n#define QUICK_SORT 1\n#define MERGE_SORT 2\n#define RADIX_SORT 3\n\nvoid sort(int algo, int* array, int length);\n```", "```cpp\nvoid sort(int algo, int* array, int length)\n{\n  switch(algo)\n  {\n    case QUICK_SORT: ![1](assets/1.png)\n      quicksort(array, length);\n    break;\n    case MERGE_SORT:\n      mergesort(array, length);\n    break;\n    case RADIX_SORT:\n      radixsort(array, length);\n    break;\n  }\n}\n```", "```cpp\ntypedef struct INTERNAL_DRIVER_STRUCT* DRIVER_HANDLE;\ntypedef void (*DriverSend_FP)(char byte);\ntypedef char (*DriverReceive_FP)();\ntypedef void (*DriverIOCTL_FP)(int ioctl, void* context);\n\nstruct DriverFunctions\n{\n  DriverSend_FP fpSend;\n  DriverReceive_FP fpReceive;\n  DriverIOCTL_FP fpIOCTL;\n};\n\nDRIVER_HANDLE driverCreate(void* initArg, struct DriverFunctions f);\nvoid driverDestroy(DRIVER_HANDLE h);\nvoid sendByte(DRIVER_HANDLE h, char byte);\nchar receiveByte(DRIVER_HANDLE h);\nvoid driverIOCTL(DRIVER_HANDLE h, int ioctl, void* context);\n/* the parameter \"context\" is required to pass information like the\n value of the IP address to configure to the implementation */\n```", "```cpp\n#define SET_IP_ADDRESS  1\n#define SET_MAC_ADDRESS 2\n```", "```cpp\n#define SET_USB_PROTOCOL_TYPE   3\n```"]
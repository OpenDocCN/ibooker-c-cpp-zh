["```cpp\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef __unix__\n  #include <sys/stat.h>\n  #include <fcntl.h>\n  #include <unistd.h>\n#elif defined _WIN32\n  #include <windows.h>\n#endif\n\nint main()\n{\n  char dirname[50];\n  char filename[60];\n  char* my_data = \"Write this data to the file\";\n  #ifdef __unix__\n    #ifdef STORE_IN_HOME_DIR\n      sprintf(dirname, \"%s%s\", getenv(\"HOME\"), \"/newdir/\");\n      sprintf(filename, \"%s%s\", dirname, \"newfile\");\n    #elif defined STORE_IN_CWD\n      strcpy(dirname, \"newdir\");\n      strcpy(filename, \"newdir/newfile\");\n    #endif\n    mkdir(dirname,S_IRWXU);\n    int fd = open (filename, O_RDWR | O_CREAT, 0666);\n    write(fd, my_data, strlen(my_data));\n    close(fd);\n  #elif defined _WIN32\n    #ifdef STORE_IN_HOME_DIR\n      sprintf(dirname, \"%s%s%s\", getenv(\"HOMEDRIVE\"), getenv(\"HOMEPATH\"),\n              \"\\\\newdir\\\\\");\n      sprintf(filename, \"%s%s\", dirname, \"newfile\");\n    #elif defined STORE_IN_CWD\n      strcpy(dirname, \"newdir\");\n      strcpy(filename, \"newdir\\\\newfile\");\n    #endif\n    CreateDirectory (dirname, NULL);\n    HANDLE hFile = CreateFile(filename, GENERIC_WRITE, 0, NULL,\n                              CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);\n    WriteFile(hFile, my_data, strlen(my_data), NULL, NULL);\n    CloseHandle(hFile);\n  #endif\n  return 0;\n}\n```", "```cpp\n#include <standardizedApi.h>\n\nint main()\n{\n  /* just a single function is called instead of multiple via\n ifdef distinguished functions */\n  somePosixFunction();\n  return 0;\n}\n```", "```cpp\n  /* this function is available on all operating systems\n that adhere to the POSIX standard */\n  somePosixFunction();\n```", "```cpp\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef __unix__\n  #include <sys/stat.h>\n#elif defined _WIN32\n  #include <windows.h>\n#endif\n\nint main()\n{\n  char dirname[50];\n  char filename[60];\n  char* my_data = \"Write this data to the file\";\n  #ifdef __unix__\n    #ifdef STORE_IN_HOME_DIR\n      sprintf(dirname, \"%s%s\", getenv(\"HOME\"), \"/newdir/\");\n      sprintf(filename, \"%s%s\", dirname, \"newfile\");\n    #elif defined STORE_IN_CWD\n      strcpy(dirname, \"newdir\");\n      strcpy(filename, \"newdir/newfile\");\n    #endif\n    mkdir(dirname,S_IRWXU);\n  #elif defined _WIN32\n    #ifdef STORE_IN_HOME_DIR\n      sprintf(dirname, \"%s%s%s\", getenv(\"HOMEDRIVE\"), getenv(\"HOMEPATH\"),\n              \"\\\\newdir\\\\\");\n      sprintf(filename, \"%s%s\", dirname, \"newfile\");\n    #elif defined STORE_IN_CWD\n      strcpy(dirname, \"newdir\");\n      strcpy(filename, \"newdir\\\\newfile\");\n    #endif\n    CreateDirectory(dirname, NULL);\n  #endif\n  FILE* f = fopen(filename, \"w+\"); ![1](assets/1.png)\n  fwrite(my_data, 1, strlen(my_data), f);\n  fclose(f);\n  return 0;\n}\n```", "```cpp\nvoid handlePlatformVariants()\n{\n  #ifdef PLATFORM_A\n    /* call function of platform A */\n  #elif defined PLATFORM_B ![1](assets/1.png)\n    /* call function of platform B */\n  #endif\n}\n\nint main()\n{\n  /* program logic goes here */\n  handlePlatformVariants();\n  /* program logic continues */\n}\n```", "```cpp\nvoid getDirectoryName(char* dirname)\n{\n  #ifdef __unix__\n    #ifdef STORE_IN_HOME_DIR\n      sprintf(dirname, \"%s%s\", getenv(\"HOME\"), \"/newdir/\");\n    #elif defined STORE_IN_CWD\n      strcpy(dirname, \"newdir/\");\n    #endif\n  #elif defined _WIN32\n    #ifdef STORE_IN_HOME_DIR\n      sprintf(dirname, \"%s%s%s\", getenv(\"HOMEDRIVE\"), getenv(\"HOMEPATH\"),\n              \"\\\\newdir\\\\\");\n    #elif defined STORE_IN_CWD\n      strcpy(dirname, \"newdir\\\\\");\n    #endif\n  #endif\n}\n\nvoid createNewDirectory(char* dirname)\n{\n  #ifdef __unix__\n    mkdir(dirname,S_IRWXU);\n  #elif defined _WIN32\n    CreateDirectory (dirname, NULL);\n  #endif\n}\n\nint main()\n{\n  char dirname[50];\n  char filename[60];\n  char* my_data = \"Write this data to the file\";\n  getDirectoryName(dirname);\n  createNewDirectory(dirname);\n  sprintf(filename, \"%s%s\", dirname, \"newfile\");\n  FILE* f = fopen(filename, \"w+\");\n  fwrite(my_data, 1, strlen(my_data), f);\n  fclose(f);\n  return 0;\n}\n```", "```cpp\nvoid handleHardwareOfFeatureX()\n{\n  #ifdef HARDWARE_A\n   /* call function for feature X on hardware A */\n  #elif defined HARDWARE_B || defined HARDWARE_C\n   /* call function for feature X on hardware B and C */\n  #endif\n}\n\nvoid handleHardwareOfFeatureY()\n{\n  #ifdef HARDWARE_A\n   /* call function for feature Y on hardware A */\n  #elif defined HARDWARE_B\n   /* call function for feature Y on hardware B */\n  #elif defined HARDWARE_C\n   /* call function for feature Y on hardware C */\n  #endif\n}\n\nvoid callFeature()\n{\n  #ifdef FEATURE_X\n    handleHardwareOfFeatureX();\n  #elif defined FEATURE_Y\n    handleHardwareOfFeatureY();\n  #endif\n}\n```", "```cpp\nvoid getHomeDirectory(char* dirname)\n{\n  #ifdef __unix__\n    sprintf(dirname, \"%s%s\", getenv(\"HOME\"), \"/newdir/\");\n  #elif defined _WIN32\n    sprintf(dirname, \"%s%s%s\", getenv(\"HOMEDRIVE\"), getenv(\"HOMEPATH\"),\n            \"\\\\newdir\\\\\");\n  #endif\n}\n\nvoid getWorkingDirectory(char* dirname)\n{\n  #ifdef __unix__\n    strcpy(dirname, \"newdir/\");\n  #elif defined _WIN32\n    strcpy(dirname, \"newdir\\\\\");\n  #endif\n}\n\nvoid getDirectoryName(char* dirname)\n{\n  #ifdef STORE_IN_HOME_DIR\n    getHomeDirectory(dirname);\n  #elif defined STORE_IN_CWD\n    getWorkingDirectory(dirname);\n  #endif\n}\n```", "```cpp\n#include \"someFeature.h\"\n\nint main()\n{\n  someFeature();\n  return 0;\n}\n```", "```cpp\n/* Provides generic access to someFeature.\n Supported on platform A and platform B. */\nvoid someFeature();\n```", "```cpp\nvoid someFeature()\n{\n  #ifdef PLATFORM_A\n    performFeaturePlatformA();\n  #elif defined PLATFORM_B\n    performFeaturePlatformB();\n  #endif\n}\n```", "```cpp\n/* Copies the path to a new directory with name \"newdir\"\n located in the user's home directory into \"dirname\".\n Works on Linux and Windows. */\nvoid getHomeDirectory(char* dirname);\n\n/* Copies the path to a new directory with name \"newdir\"\n located in the current working directory into \"dirname\".\n Works on Linux and Windows. */\nvoid getWorkingDirectory(char* dirname);\n```", "```cpp\n#include \"directoryNames.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid getHomeDirectory(char* dirname)\n{\n  #ifdef __unix__\n    sprintf(dirname, \"%s%s\", getenv(\"HOME\"), \"/newdir/\");\n  #elif defined _WIN32\n    sprintf(dirname, \"%s%s%s\", getenv(\"HOMEDRIVE\"), getenv(\"HOMEPATH\"),\n            \"\\\\newdir\\\\\");\n  #endif\n}\n\nvoid getWorkingDirectory(char* dirname)\n{\n  #ifdef __unix__\n    strcpy(dirname, \"newdir/\");\n  #elif defined _WIN32\n    strcpy(dirname, \"newdir\\\\\");\n  #endif\n}\n```", "```cpp\n/* Copies the path to a new directory with name \"newdir\" into \"dirname\".\n The directory is located in the user's home directory, if STORE_IN_HOME_DIR\n is set or it is located in the current working directory, if STORE_IN_CWD\n is set. */\nvoid getDirectoryName(char* dirname);\n```", "```cpp\n#include \"directorySelection.h\"\n#include \"directoryNames.h\"\n\nvoid getDirectoryName(char* dirname)\n{\n  #ifdef STORE_IN_HOME_DIR\n    getHomeDirectory(dirname);\n  #elif defined STORE_IN_CWD\n    getWorkingDirectory(dirname);\n  #endif\n}\n```", "```cpp\n/* Creates a new directory of the provided name (\"dirname\").\n Works on Linux and Windows. */\nvoid createNewDirectory(char* dirname);\n```", "```cpp\n#include \"directoryHandling.h\"\n#ifdef __unix__\n  #include <sys/stat.h>\n#elif defined _WIN32\n  #include <windows.h>\n#endif\n\nvoid createNewDirectory(char* dirname)\n{\n  #ifdef __unix__\n    mkdir(dirname,S_IRWXU);\n  #elif defined _WIN32\n    CreateDirectory (dirname, NULL);\n  #endif\n}\n```", "```cpp\n#include <stdio.h>\n#include <string.h>\n#include \"directorySelection.h\"\n#include \"directoryHandling.h\"\n\nint main()\n{\n  char dirname[50];\n  char filename[60];\n  char* my_data = \"Write this data to the file\";\n  getDirectoryName(dirname);\n  createNewDirectory(dirname);\n  sprintf(filename, \"%s%s\", dirname, \"newfile\");\n  FILE* f = fopen(filename, \"w+\");\n  fwrite(my_data, 1, strlen(my_data), f);\n  fclose(f);\n  return 0;\n}\n```", "```cpp\n/* Provides generic access to someFeature.\n Supported on platform A and platform B. */\n  someFeature();\n```", "```cpp\n#ifdef _WIN32\n  someFeature()\n  {\n    performWindowsFeature();\n  }\n#endif\n```", "```cpp\n#ifdef __unix__\n  someFeature()\n  {\n    performLinuxFeature();\n  }\n#endif\n```", "```cpp\n/* Copies the path to a new directory with name \"newdir\"\n located in the user's home directory into \"dirname\".\n Works on Linux and Windows. */\nvoid getHomeDirectory(char* dirname);\n\n/* Copies the path to a new directory with name \"newdir\"\n located in the current working directory into \"dirname\".\n Works on Linux and Windows. */\nvoid getWorkingDirectory(char* dirname);\n```", "```cpp\n#ifdef __unix__\n  #include \"directoryNames.h\"\n  #include <string.h>\n  #include <stdio.h>\n  #include <stdlib.h>\n\n  void getHomeDirectory(char* dirname)\n  {\n    sprintf(dirname, \"%s%s\", getenv(\"HOME\"), \"/newdir/\");\n  }\n\n  void getWorkingDirectory(char* dirname)\n  {\n    strcpy(dirname, \"newdir/\");\n  }\n#endif\n```", "```cpp\n#ifdef _WIN32\n  #include \"directoryNames.h\"\n  #include <string.h>\n  #include <stdio.h>\n  #include <windows.h>\n\n  void getHomeDirectory(char* dirname)\n  {\n    sprintf(dirname, \"%s%s%s\", getenv(\"HOMEDRIVE\"), getenv(\"HOMEPATH\"),\n            \"\\\\newdir\\\\\");\n  }\n\n  void getWorkingDirectory(char* dirname)\n  {\n    strcpy(dirname, \"newdir\\\\\");\n  }\n#endif\n```", "```cpp\n/* Copies the path to a new directory with name \"newdir\" into \"dirname\".\n The directory is located in the user's home directory, if STORE_IN_HOME_DIR\n is set or it is located in the current working directory, if STORE_IN_CWD\n is set. */\nvoid getDirectoryName(char* dirname);\n```", "```cpp\n#ifdef STORE_IN_HOME_DIR\n  #include \"directorySelection.h\"\n  #include \"directoryNames.h\"\n\n  void getDirectoryName(char* dirname)\n  {\n    getHomeDirectory(dirname);\n  }\n#endif\n```", "```cpp\n#ifdef STORE_IN_CWD\n  #include \"directorySelection.h\"\n  #include \"directoryNames.h\"\n\n  void getDirectoryName(char* dirname)\n  {\n    return getWorkingDirectory(dirname);\n  }\n#endif\n```", "```cpp\n/* Creates a new directory of the provided name (\"dirname\").\n Works on Linux and Windows. */\nvoid createNewDirectory(char* dirname);\n```", "```cpp\n#ifdef __unix__\n  #include <sys/stat.h>\n\n  void createNewDirectory(char* dirname)\n  {\n    mkdir(dirname,S_IRWXU);\n  }\n#endif\n```", "```cpp\n#ifdef _WIN32\n  #include <windows.h>\n\n  void createNewDirectory(char* dirname)\n  {\n    CreateDirectory(dirname, NULL);\n  }\n#endif\n```", "```cpp\n#include \"directorySelection.h\"\n#include \"directoryHandling.h\"\n#include <string.h>\n#include <stdio.h>\n\nint main()\n{\n  char dirname[50];\n  char filename[60];\n  char* my_data = \"Write this data to the file\";\n  getDirectoryName(dirname);\n  createNewDirectory(dirname);\n  sprintf(filename, \"%s%s\", dirname, \"newfile\");\n  FILE* f = fopen(filename, \"w+\");\n  fwrite(my_data, 1, strlen(my_data), f);\n  fclose(f);\n  return 0;\n}\n```"]
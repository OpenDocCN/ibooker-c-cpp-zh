["```cpp\n$ tar xf arduino-1.8.13-linux64.tar.xz\n```", "```cpp\nint main() {\n  setup();\n  while (1) {\n    loop();\n  }\n}\n```", "```cpp\nvoid setup() {\n  // put your setup code here, to run once:\n  // Tell our board we want to write to the built-in LED\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  // A high value is 'on' for an LED\n  digitalWrite(LED_BUILTIN, HIGH);\n  // Now wait for 500 milliseconds\n  delay(500);\n  // And write a low value to turn our LED off\n  digitalWrite(LED_BUILTIN, LOW);\n  // and wait another 500ms\n  delay(500);\n}\n```", "```cpp\n#define D2 2\n\nvoid setup() {\n  // put your setup code here, to run once:\n  // Tell our board we want to write to digital pin 2\n  pinMode(D2, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(D2, HIGH);\n  delay(2000);\n  digitalWrite(D2, LOW);\n  delay(1000);\n}\n```", "```cpp\n#include <Adafruit_NeoPixel.h>\n```", "```cpp\n#include <Adafruit_NeoPixel.h>\n\n#define PIXEL_PIN   4\n#define PIXEL_COUNT 1\n\n// Declare our NeoPixel strip object per documentation from Adafruit // https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library-use \nAdafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);            ![1](Images/1.png)\n\nvoid setup() {\n  strip.begin();            // Get things ready ![2](Images/2.png)\n  strip.setBrightness(128); // Set a comfortable brightness ![3](Images/3.png)\n  strip.show();             // Start with all pixels off ![4](Images/4.png)\n}\n\nvoid loop() {\n  // Show red for 1 second on the first pixel (start counting at 0)\n  strip.setPixelColor(0, 255, 0, 0); ![5](Images/5.png)\n  strip.show();                      ![6](Images/6.png)\n  delay(1000);\n  // Show green for 1 second\n  strip.setPixelColor(0, 0, 255, 0);\n  strip.show();\n  delay(1000);\n  // Show blue for 1 second\n  strip.setPixelColor(0, 0, 0, 255);\n  strip.show();\n  delay(1000);\n}\n```", "```cpp\nint counter = 1;\n```", "```cpp\nInteger counter(1);\n```", "```cpp\nvoid setup() {\n  begin(&strip);\n  // ...\n}\n\nvoid loop() {\n  // ...\n  setPixelColor(&strip, 0, 255, 0, 0);\n}\n```", "```cpp\n#include <Adafruit_NeoPixel.h>\n\n#define STICK_PIN   2\n#define STICK_COUNT 8\n#define RING_PIN    4\n#define RING_COUNT 24\n\n// Declare our NeoPixel strip object per documentation from Adafruit // https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library-use \nAdafruit_NeoPixel stick(STICK_COUNT, STICK_PIN);        ![1](Images/1.png)\nAdafruit_NeoPixel ring(RING_COUNT, RING_PIN, NEO_GRBW); ![2](Images/2.png)\n\nvoid setup() {\n  stick.begin();            // Initialize our stick ![3](Images/3.png)\n  stick.setBrightness(128);\n  stick.show();\n  ring.begin();             // Initialize our ring ![4](Images/4.png)\n  ring.setBrightness(128);\n  ring.show();\n}\n\nvoid loop() {\n  // our stick and ring have different LED counts, so we have\n  // to be a little clever with our loop. There are several\n  // ways to do this. We'll use modulus (remainder) math, but\n  // can you think of other solutions that would achieve\n  // the same pattern?\n  for (int p = 0; p < RING_COUNT; p++) {\n    stick.clear();\n    stick.setPixelColor(p % STICK_COUNT, 0, 0, 255);    ![5](Images/5.png)\n    ring.clear();\n    ring.setPixelColor(p, 0, 255, 0, 0);                ![6](Images/6.png)\n    stick.show();                                       ![7](Images/7.png)\n    ring.show();\n  }\n}\n```", "```cpp\n// Using a library written in C++ still requires the same C \"#include\"\n// directive to bring in the associated header file.\n#include <Adafruit_NeoPixel.h>\n\n#define PIXEL_PIN   4\n#define PIXEL_COUNT 1\n\n// Common example of a C++ constructor call that creates an object.\n// Our NeoPixel \"strip\" is the created object in this case.\nAdafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);\n\nvoid setup() {\n  // Common example of using the method \"begin()\" from our object \"strip\".\n  strip.begin();\n\n// ...\n```"]
["```cpp\n//---- <Point.h> ----------------\n\nstruct Point\n{\n   double x;\n   double y;\n};\n```", "```cpp\n//---- <Shape.h> ---------------- \nenum ShapeType  ![1](assets/1.png)\n{\n   circle,\n   square\n};\n\nclass Shape  ![2](assets/2.png)\n{\n protected:\n   explicit Shape( ShapeType type )\n      : type_( type )  ![5](assets/5.png)\n   {}\n\n public:\n   virtual ~Shape() = default;  ![3](assets/3.png)\n\n   ShapeType getType() const { return type_; }  ![6](assets/6.png)\n\n private:\n   ShapeType type_;  ![4](assets/4.png)\n};\n\n```", "```cpp\n//---- <Circle.h> ---------------- \n#include <Point.h>\n#include <Shape.h>\n\nclass Circle : public Shape  ![7](assets/7.png)\n{\n public:\n   explicit Circle( double radius )\n      : Shape( circle )  ![8](assets/8.png)\n      , radius_( radius )\n   {\n      /* Checking that the given radius is valid */\n   }\n\n   double radius() const { return radius_; }\n   Point  center() const { return center_; }\n\n private:\n   double radius_;\n   Point center_{};\n};\n\n```", "```cpp\n//---- <DrawCircle.h> ----------------\n\nclass Circle;\n\nvoid draw( Circle const& );\n\n//---- <DrawCircle.cpp> ----------------\n\n#include <DrawCircle.h>\n#include <Circle.h>\n#include /* some graphics library */\n\nvoid draw( Circle const& c )\n{\n   // ... Implementing the logic for drawing a circle\n}\n```", "```cpp\n//---- <Square.h> ---------------- \n#include <Point.h>\n#include <Shape.h>\n\nclass Square : public Shape  ![9](assets/9.png)\n{\n public:\n   explicit Square( double side )\n      : Shape( square )  ![10](assets/10.png)\n      , side_( side )\n   {\n      /* Checking that the given side length is valid */\n   }\n\n   double side  () const { return side_; }\n   Point  center() const { return center_; }\n\n private:\n   double side_;\n   Point center_{};  // Or any corner, if you prefer };\n\n//---- <DrawSquare.h> ---------------- \nclass Square;\n\nvoid draw( Square const& );\n\n//---- <DrawSquare.cpp> ---------------- \n#include <DrawSquare.h>\n#include <Square.h>\n#include /* some graphics library */\n\nvoid draw( Square const& s )\n{\n   // ... Implementing the logic for drawing a square }\n\n```", "```cpp\n//---- <DrawAllShapes.h> ---------------- \n#include <memory>\n#include <vector>\nclass Shape;\n\nvoid drawAllShapes( std::vector<std::unique_ptr<Shape>> const& shapes );  ![11](assets/11.png)\n\n//---- <DrawAllShapes.cpp> ---------------- \n#include <DrawAllShapes.h>\n#include <Circle.h>\n#include <Square.h>\n\nvoid drawAllShapes( std::vector<std::unique_ptr<Shape>> const& shapes )\n{\n   for( auto const& shape : shapes )\n   {\n      switch( shape->getType() )  ![12](assets/12.png)\n      {\n         case circle:\n            draw( static_cast<Circle const&>( *shape ) );\n            break;\n         case square:\n            draw( static_cast<Square const&>( *shape ) );\n            break;\n      }\n   }\n}\n\n```", "```cpp\n//---- <Main.cpp> ----------------\n\n#include <Circle.h>\n#include <Square.h>\n#include <DrawAllShapes.h>\n#include <memory>\n#include <vector>\n\nint main()\n{\n   using Shapes = std::vector<std::unique_ptr<Shape>>;\n\n   // Creating some shapes\n   Shapes shapes;\n   shapes.emplace_back( std::make_unique<Circle>( 2.3 ) );\n   shapes.emplace_back( std::make_unique<Square>( 1.2 ) );\n   shapes.emplace_back( std::make_unique<Circle>( 4.1 ) );\n\n   // Drawing all shapes\n   drawAllShapes( shapes );\n\n   return EXIT_SUCCESS;\n}\n```", "```cpp\nenum ShapeType\n{\n   circle,\n   square,\n   triangle  ![13](assets/13.png)\n};\n\n```", "```cpp\nvoid drawAllShapes( std::vector<std::unique_ptr<Shape>> const& shapes )\n{\n   for( auto const& shape : shapes )\n   {\n      switch( shape->getType() )\n      {\n         case circle:\n            draw( static_cast<Circle const&>( *shape ) );\n            break;\n         case square:\n            draw( static_cast<Square const&>( *shape ) );\n            break;\n         case triangle:  ![14](assets/14.png)\n            draw( static_cast<Triangle const&>( *shape ) );\n            break;\n      }\n   }\n}\n\n```", "```cpp\n//---- <Shape.h> ----------------\n\nclass Shape\n{\n public:\n   Shape() = default;\n\n   virtual ~Shape() = default;\n\n   virtual void draw() const = 0;\n};\n```", "```cpp\n//---- <Circle.h> ---------------- \n#include <Point.h>\n#include <Shape.h>\n\nclass Circle : public Shape\n{\n public:\n   explicit Circle( double radius )\n      : radius_( radius )\n   {\n      /* Checking that the given radius is valid */\n   }\n\n   double radius() const { return radius_; }\n   Point  center() const { return center_; }\n\n   void draw() const override;  ![15](assets/15.png)\n\n private:\n   double radius_;\n   Point center_{};\n};\n\n//---- <Circle.cpp> ---------------- \n#include <Circle.h>\n#include /* some graphics library */\n\nvoid Circle::draw() const\n{\n   // ... Implementing the logic for drawing a circle }\n\n//---- <Square.h> ---------------- \n#include <Point.h>\n#include <Shape.h>\n\nclass Square : public Shape\n{\n public:\n   explicit Square( double side )\n      : side_( side )\n   {\n      /* Checking that the given side length is valid */\n   }\n\n   double side  () const { return side_; }\n   Point  center() const { return center_; }\n\n   void draw() const override;  ![15](assets/15.png)\n\n private:\n   double side_;\n   Point center_{};\n};\n\n//---- <Square.cpp> ---------------- \n#include <Square.h>\n#include /* some graphics library */\n\nvoid Square::draw() const\n{\n   // ... Implementing the logic for drawing a square }\n\n```", "```cpp\n//---- <DrawAllShapes.h> ----------------\n\n#include <memory>\n#include <vector>\nclass Shape;\n\nvoid drawAllShapes( std::vector< std::unique_ptr<Shape> > const& shapes );\n\n//---- <DrawAllShapes.cpp> ----------------\n\n#include <DrawAllShapes.h>\n#include <Shape.h>\n\nvoid drawAllShapes( std::vector< std::unique_ptr<Shape> > const& shapes )\n{\n   for( auto const& shape : shapes )\n   {\n      shape->draw();\n   }\n}\n```", "```cpp\nclass ShapeVisitor\n{\n public:\n   virtual ~ShapeVisitor() = default;\n\n   virtual void visit( Circle const&, /*...*/ ) const = 0;  ![1](assets/1.png)\n   virtual void visit( Square const&, /*...*/ ) const = 0;  ![2](assets/2.png)\n   // Possibly more visit() functions, one for each concrete shape };\n\n```", "```cpp\nclass Draw : public ShapeVisitor\n{\n public:\n   void visit( Circle const& c, /*...*/ ) const override;\n   void visit( Square const& s, /*...*/ ) const override;\n   // Possibly more visit() functions, one for each concrete shape\n};\n```", "```cpp\nclass Shape\n{\n public:\n   virtual ~Shape() = default;\n   virtual void accept( ShapeVisitor const& v ) = 0;  ![3](assets/3.png)\n   // ... };\n\n```", "```cpp\nclass Circle : public Shape\n{\n public:\n   explicit Circle( double radius )\n      : radius_( radius )\n   {\n      /* Checking that the given radius is valid */\n   }\n\n   void accept( ShapeVisitor const& v ) override { v.visit( *this ); }  ![4](assets/4.png)\n\n   double radius() const { return radius_; }\n\n private:\n   double radius_;\n};\n\nclass Square : public Shape\n{\n public:\n   explicit Square( double side )\n      : side_( side )\n   {\n      /* Checking that the given side length is valid */\n   }\n\n   void accept( ShapeVisitor const& v ) override { v.visit( *this ); }  ![5](assets/5.png)\n\n   double side() const { return side_; }\n\n private:\n   double side_;\n};\n\n```", "```cpp\nvoid drawAllShapes( std::vector<std::unique_ptr<Shape>> const& shapes )\n{\n   for( auto const& shape : shapes )\n   {\n      shape->accept( Draw{} );\n   }\n}\n```", "```cpp\nclass Translate : public ShapeVisitor\n{\n public:\n   // Where is the difference between translating a circle and translating\n   // a square? Still you have to implement all virtual functions...\n   void visit( Circle const& c, /*...*/ ) const override;\n   void visit( Square const& s, /*...*/ ) const override;\n   // Possibly more visit() functions, one for each concrete shape\n};\n```", "```cpp\nint main()\n{\n   using Shapes = std::vector< std::unique_ptr<Shape> >;\n\n   Shapes shapes;\n\n   shapes.emplace_back( std::make_unique<Circle>( 2.3 ) );  ![6](assets/6.png)\n   shapes.emplace_back( std::make_unique<Square>( 1.2 ) );  ![7](assets/7.png)\n   shapes.emplace_back( std::make_unique<Circle>( 4.1 ) );  ![8](assets/8.png)\n\n   drawAllShapes( shapes );\n\n   // ... \n   return EXIT_SUCCESS;\n}\n\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n#include <variant>\n\nstruct Print  ![10](assets/10.png)\n{\n   void operator()( int value ) const\n      { std::cout << \"int: \" << value << '\\n'; }\n   void operator()( double value ) const\n      { std::cout << \"double: \" << value << '\\n'; }\n   void operator()( std::string const& value ) const\n      { std::cout << \"string: \" << value << '\\n'; }\n};\n\nint main()\n{\n   // Creates a default variant that contains an 'int' initialized to 0\n   std::variant<int,double,std::string> v{};  ![1](assets/1.png)\n\n   v = 42;        // Assigns the 'int' 42 to the variant ![2](assets/2.png)\n   v = 3.14;      // Assigns the 'double' 3.14 to the variant ![3](assets/3.png)\n   v = 2.71F;     // Assigns a 'float', which is promoted to 'double' ![4](assets/4.png)\n   v = \"Bjarne\";  // Assigns the string literal 'Bjarne' to the variant ![5](assets/5.png)\n   v = 43;        // Assigns the 'int' 43 to the variant ![6](assets/6.png)\n\n   int const i = std::get<int>(v);  // Direct access to the value ![7](assets/7.png)\n\n   int* const pi = std::get_if<int>(&v);  // Direct access to the value ![8](assets/8.png)\n\n   std::visit( Print{}, v );  // Applying the Print visitor ![9](assets/9.png)\n\n   return EXIT_SUCCESS;\n}\n\n```", "```cpp\nstruct Print\n{\n   void operator()( double value ) const\n      { std::cout << \"int or double: \" << value << '\\n'; }\n   void operator()( std::string const& value ) const\n      { std::cout << \"string: \" << value << '\\n'; }\n};\n```", "```cpp\n//---- <Circle.h> ----------------\n\n#include <Point.h>\n\nclass Circle\n{\n public:\n   explicit Circle( double radius )\n      : radius_( radius )\n   {\n      /* Checking that the given radius is valid */\n   }\n\n   double radius() const { return radius_; }\n   Point  center() const { return center_; }\n\n private:\n   double radius_;\n   Point center_{};\n};\n\n//---- <Square.h> ----------------\n\n#include <Point.h>\n\nclass Square\n{\n public:\n   explicit Square( double side )\n      : side_( side )\n   {\n      /* Checking that the given side length is valid */\n   }\n\n   double side  () const { return side_; }\n   Point  center() const { return center_; }\n\n private:\n   double side_;\n   Point center_{};\n};\n```", "```cpp\n//---- <Shape.h> ---------------- \n#include <variant>\n#include <Circle.h>\n#include <Square.h>\n\nusing Shape = std::variant<Circle,Square>;  ![11](assets/11.png)\n\n//---- <Shapes.h> ---------------- \n#include <vector>\n#include <Shape.h>\n\nusing Shapes = std::vector<Shape>;  ![12](assets/12.png)\n\n```", "```cpp\n//---- <Draw.h> ----------------\n\n#include <Shape.h>\n#include /* some graphics library */\n\nstruct Draw\n{\n   void operator()( Circle const& c ) const\n      { /* ... Implementing the logic for drawing a circle ... */ }\n   void operator()( Square const& s ) const\n      { /* ... Implementing the logic for drawing a square ... */ }\n};\n```", "```cpp\n//---- <DrawAllShapes.h> ----------------\n\n#include <Shapes.h>\n\nvoid drawAllShapes( Shapes const& shapes );\n\n//---- <DrawAllShapes.cpp> ----------------\n\n#include <DrawAllShapes.h>\n\nvoid drawAllShapes( Shapes const& shapes )\n{\n   for( auto const& shape : shapes )\n   {\n      std::visit( Draw{}, shape );\n   }\n}\n```", "```cpp\nvoid drawAllShapes( Shapes const& shapes )\n{\n   for( auto const& shape : shapes )\n   {\n      if( Circle* circle = std::get_if<Circle>(&shape) ) {\n         // ... Drawing a circle\n      }\n      else if( Square* square = std::get_if<Square>(&shape) ) {\n         // ... Drawing a square\n      }\n   }\n}\n```", "```cpp\n//---- <Main.cpp> ----------------\n\n#include <Circle.h>\n#include <Square.h>\n#include <Shapes.h>\n#include <DrawAllShapes.h>\n\nint main()\n{\n   Shapes shapes;\n\n   shapes.emplace_back( Circle{ 2.3 } );\n   shapes.emplace_back( Square{ 1.2 } );\n   shapes.emplace_back( Circle{ 4.1 } );\n\n   drawAllShapes( shapes );\n\n   return EXIT_SUCCESS;\n}\n```", "```cpp\n//---- <Shape.h> ---------------- \n#include <variant>\n#include <Circle.h>\n#include <Square.h>\n\nusing Shape = std::variant<Circle,Square>;  ![13](assets/13.png)\n\n//---- <SomeHeader.h> ---------------- \n#include <Circle.h>\n#include <Ellipse.h>\n#include <variant>\n\nusing RoundShapes = std::variant<Circle,Ellipse>;  ![14](assets/14.png)\n\n//---- <SomeOtherHeader.h> ---------------- \n#include <Square.h>\n#include <Rectangle.h>\n#include <variant>\n\nusing AngularShapes = std::variant<Square,Rectangle>;  ![15](assets/15.png)\n\n```", "```cpp\n//---- <AbstractVisitor.h> ---------------- \nclass AbstractVisitor  ![1](assets/1.png)\n{\n public:\n   virtual ~AbstractVisitor() = default;\n};\n\n//---- <Visitor.h> ---------------- \ntemplate< typename T >\nclass Visitor  ![2](assets/2.png)\n{\n protected:\n   ~Visitor() = default;\n\n public:\n   virtual void visit( T const& ) const = 0;\n};\n\n```", "```cpp\nclass Draw : public AbstractVisitor\n           , public Visitor<Circle>\n           , public Visitor<Square>\n{\n public:\n   void visit( Circle const& c ) const override\n      { /* ... Implementing the logic for drawing a circle ... */ }\n   void visit( Square const& s ) const override\n      { /* ... Implementing the logic for drawing a square ... */ }\n};\n```", "```cpp\n//---- <Circle.h> ---------------- \nclass Circle : public Shape\n{\n public:\n   explicit Circle( double radius )\n      : radius_( radius )\n   {\n      /* Checking that the given radius is valid */\n   }\n\n   void accept( AbstractVisitor const& v ) override {  ![3](assets/3.png)\n      if( auto const* cv = dynamic_cast<Visitor<Circle> const*>(&v) ) {  ![4](assets/4.png)\n         cv->visit( *this );  ![5](assets/5.png)\n      }\n   }\n\n   double radius() const { return radius_; }\n   Point  center() const { return center_; }\n\n private:\n   double radius_;\n   Point center_{};\n};\n\n```"]
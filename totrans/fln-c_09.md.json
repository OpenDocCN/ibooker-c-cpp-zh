["```cpp\n#include <stdio.h>\n\nstatic unsigned int adler32hash(const char* buffer, int length)\n{\n  unsigned int s1=1;\n  unsigned int s2=0;\n  int i=0;\n\n  for(i=0; i<length; i++)\n  {\n    s1=(s1+buffer[i]) % 65521;\n    s2=(s1+s2) % 65521;\n  }\n  return (s2<<16) | s1;\n}\n\nint main(int argc, char* argv[])\n{\n  char* buffer = \"Some Text\";\n  unsigned int hash = adler32hash(buffer, 100);\n  printf(\"Hash value: %u\", hash);\n  return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"hash.h\"\n#include \"filereader.h\"\n\nint main(int argc, char* argv[])\n{\n  char* buffer = malloc(100);\n  getFileContent(buffer, 100);\n  unsigned int hash = adler32hash(buffer, 100);\n  printf(\"Hash value: %u\", hash);\n  return 0;\n}\n```", "```cpp\n/* Returns the hash value of the provided \"buffer\" of size \"length\".\n The hash is calculated according to the Adler32 algorithm. */\nunsigned int adler32hash(const char* buffer, int length);\n```", "```cpp\n#include \"hash.h\"\n\nunsigned int adler32hash(const char* buffer,  int length)\n{\n  /* no changes here */\n}\n```", "```cpp\n/* Reads the content of a file and stores it in the  provided \"buffer\"\n if is is long enough according to its provided \"length\" */\nvoid getFileContent(char* buffer, int length);\n```", "```cpp\n#include <stdio.h>\n#include \"filereader.h\"\n\nvoid getFileContent(char* buffer, int length)\n{\n  FILE* file = fopen(\"SomeFile\", \"rb\");\n  fread(buffer, length, 1, file);\n  fclose(file);\n}\n```", "```cpp\n#ifndef SOMECODE_H\n#define SOMECODE_H\n /* put the content of your headerfile here */\n#endif\n```", "```cpp\n#pragma once\n /* put the content of your headerfile here */\n```", "```cpp\n#ifndef HASH_H\n#define HASH_H\n/* Returns the hash value of the provided \"buffer\" of size \"length\".\n The hash is calculated according to the Adler32 algorithm. */\nunsigned int adler32hash(const char* buffer, int length);\n#endif\n```", "```cpp\n#ifndef FILEREADER_H\n#define FILEREADER_H\n/* Reads the content of a file and stores it in the provided \"buffer\"\n if is is long enough according to its provided \"length\" */\nvoid getFileContent(char* buffer, int length);\n#endif\n```", "```cpp\n#include \"somecode.h\"\n#include \"morecode.h\"\n#include \"../othersoftwaremodule/othercode.h\"\n...\n```", "```cpp\n#include \"morecode.h\"\n...\n```", "```cpp\n#include \"othercode.h\"\n...\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"adler/adlerhash.h\"\n#include \"bernstein/bernsteinhash.h\"\n#include \"filereader/filereader.h\"\n\nint main(int argc, char* argv[])\n{\n  char* buffer = malloc(100);\n  getFileContent(buffer, 100);\n\n  unsigned int hash = adler32hash(buffer, 100);\n  printf(\"Adler32 hash value: %u\", hash);\n\n  unsigned int hash = bernsteinHash(buffer, 100);\n  printf(\"Bernstein hash value: %u\", hash);\n\n  return 0;\n}\n```", "```cpp\n#ifndef BERNSTEINHASH_H\n#define BERNSTEINHASH_H\n/* Returns the hash value of the provided \"buffer\" of size \"length\".\n The hash is calculated according to the D.J. Bernstein algorithm. */\nunsigned int bernsteinHash(const char* buffer, int length);\n#endif\n```", "```cpp\n#include \"bernsteinhash.h\"\n\nunsigned int bernsteinHash(const char* buffer, int length)\n{\n  unsigned int hash = 5381;\n  int i;\n  for(i=0; i<length; i++)\n  {\n    hash = 33 * hash ^ buffer[i];\n  }\n  return hash;\n}\n```", "```cpp\n#include <somecode.h>\n#include <othercode.h>\n#include \"morecode.h\"\n...\n```", "```cpp\n#include \"morecode.h\"\n...\n```", "```cpp\n#include <othercode.h>\n...\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <adlerhash.h>\n#include <bernsteinhash.h>\n#include <filereader.h>\n\nint main(int argc, char* argv[])\n{\n  char* buffer = malloc(100);\n  getFileContent(buffer, 100);\n\n  unsigned int hash = adler32hash(buffer, 100);\n  printf(\"Adler32 hash value: %u\", hash);\n\n  hash = bernsteinHash(buffer, 100);\n  printf(\"Bernstein hash value: %u\", hash);\n\n  return 0;\n}\n```", "```cpp\n#include <somecode.h>\n#include <othercode.h>\n#include \"morecode.h\"\n...\n```", "```cpp\n#include \"morecode.h\"\n...\n```", "```cpp\n#include <othercode.h>\n...\n```", "```cpp\n#include <nextcode.h>\n#include <othercode.h> // use API of other component\n...\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <adlerhash.h>\n#include <bernsteinhash.h>\n#include <filereader.h>\n#include <pseudorandom.h>\n\nint main(int argc, char* argv[])\n{\n  char* buffer = malloc(100);\n  getFileContent(buffer, 100);\n\n  unsigned int hash = adler32hash(buffer, 100);\n  printf(\"Adler32 hash value: %u\", hash);\n\n  hash = bernsteinHash(buffer, 100);\n  printf(\"Bernstein hash value: %u\", hash);\n\n  unsigned int random = getRandomNumber(50);\n  printf(\"Random value: %u\", random);\n\n  return 0;\n}\n```", "```cpp\n#ifndef PSEUDORANDOM_H\n#define PSEUDORANDOM_H\n/* Returns a pseudo random number lower than the\n provided maximum number (parameter `max')*/\nunsigned int getRandomNumber(int max);\n#endif\n```", "```cpp\n#include <pseudorandom.h>\n#include <adlerhash.h>\n\nunsigned int getRandomNumber(int max)\n{\n  char* seed = \"seed-text\";\n  unsigned int random = adler32hash(seed, 10);\n  return random % max;\n}\n```", "```cpp\n#include <somecode.h>\n#include <othercode.h>\n#include \"morecode.h\"\n...\n```", "```cpp\n#include \"morecode.h\"\n...\n```", "```cpp\n#include <othercode.h>\n...\n```", "```cpp\n#include <nextcode.h>\n...\n```", "```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <adlerhash.h>\n#include <bernsteinhash.h>\n#include <filereader.h>\n#include <pseudorandom.h>\n\nint main(int argc, char* argv[])\n{\n  char* buffer = malloc(100);\n  getFileContent(buffer, 100);\n\n  unsigned int hash = adler32hash(buffer, 100);\n  printf(\"Adler32 hash value: %u\\n\", hash);\n\n  hash = bernsteinHash(buffer, 100);\n  printf(\"Bernstein hash value: %u\\n\", hash);\n\n  unsigned int random = getRandomNumber(50);\n  printf(\"Random value: %u\\n\", random);\n\n  return 0;\n}\n```", "```cpp\n#ifndef PSEUDORANDOM_H\n#define PSEUDORANDOM_H\n/* Returns a pseudorandom number lower than the provided maximum number\n (parameter `max')*/\nunsigned int getRandomNumber(int max);\n#endif\n```", "```cpp\n#include <pseudorandom.h>\n#include <adlerhash.h>\n\nunsigned int getRandomNumber(int max)\n{\n  char* seed = \"seed-text\";\n  unsigned int random = adler32hash(seed, 10);\n  return random % max;\n}\n```", "```cpp\n#ifndef FILEREADER_H\n#define FILEREADER_H\n/* Reads the content of a file and stores it in the provided \"buffer\"\n if is is long enough according to its provided \"length\" */\nvoid getFileContent(char* buffer, int length);\n#endif\n```", "```cpp\n_fileapplication/filereader/filereader.c_\n```", "```cpp\n#include <stdio.h>\n#include \"filereader.h\"\n\nvoid getFileContent(char* buffer, int length)\n{\n  FILE* file = fopen(\"SomeFile\", \"rb\");\n  fread(buffer, length, 1, file);\n  fclose(file);\n}\n```", "```cpp\n#ifndef ADLERHASH_H\n#define ADLERHASH_H\n/* Returns the hash value of the provided \"buffer\" of size \"length\".\n The hash is calculated according to the Adler32 algorithm. */\nunsigned int adler32hash(const char* buffer, int length);\n#endif\n```", "```cpp\n#include \"adlerhash.h\"\n\nunsigned int adler32hash(const char* buffer, int length)\n{\n  unsigned int s1=1;\n  unsigned int s2=0;\n  int i=0;\n\n  for(i=0; i<length; i++)\n  {\n    s1=(s1+buffer[i]) % 65521;\n    s2=(s1+s2) % 65521;\n  }\n  return (s2<<16) | s1;\n}\n```", "```cpp\n#ifndef BERSTEINHASH_H\n#define BERNSTEINHASH_H\n/* Returns the hash value of the provided \"buffer\" of size \"length\".\n The hash is calculated according to the D.J. Bernstein algorithm. */\nunsigned int bernsteinHash(const char* buffer, int length);\n#endif\n```", "```cpp\n#include \"bernsteinhash.h\"\n\nunsigned int bernsteinHash(const char* buffer, int length)\n{\n  unsigned int hash = 5381;\n  int i;\n  for(i=0; i<length; i++)\n  {\n    hash = 33 * hash ^ buffer[i];\n  }\n  return hash;\n}\n```"]